
=pod

=encoding utf8

=head1 NAME

perlfunc - Funções internas do Perl

=head1 DESCRIÇÃO

As funções nesta seção podem servir como condições em uma expressão. Elas se
dividem em duas importantes categorias: operadores lista e operadores unários
nomeados. Elas diferem entre si pela seu relacionamento de precedência com a
vírgula seguinte. (Veja a tabela de precedência em L<perlop>.) Operadores lista
aceitam mais de um argumento, enquanto operadores unários nunca podem aceitar
mais de um argumento. Logo, uma vírgula termina o argumento de um operador
unário, porém meramente separa os argumentos de um operador lista. Um operador
unário geralmente provê um contexto escalar para seu argumento, enquanto um
operador lista pode prover ambos contextos escalar e de lista para seus
argumentos. Se ambos, os argumentos escalares vem primeiro, e o argumento lista
vem em seguida. (Note que jamais pode ser apenas um argumento de sta lista.)
Por exemplo, splice() tem três argumentos escalares seguidos por uma lista, ao
passo que gethostbyname() tem 4 argumentos escalares.

Nas descrições sintáticas que se seguem, operadores lista que esperam um lista
(e proveem contexto de lista para os elementos da lista) são mostrados com
LISTA como um argumento. Essa lista pode consistir de qualquer combinação de
argumentos escalares ou valores lista; os valores lista sempre são incluídos na
lista como se cada elemento individual fosse interpolado naquele momento na
lista, formando um longo valor lista unidimensional. Elementos de um LISTA
devem ser separados por vírgulas.

Qualquer função na lista abaixo pode ser usada com ou sem parêntesis ao redor
de seus argumentos. (As descrições sintáticas omitem os parênteses.) Se você
usa os parênteses, a simples (mas por vezes surpreendente) regra é esta:
I<Assemelha-se> a uma função, portanto I<é> uma função, e precedência não vem
ao caso. Em outros casos isto é um operador lista ou operador unário, e
precedência vem ao caso. E espaço em branco entre a função e o parentese
esquerdo não conta -- assim você precisa ser cuidados às vezes:

    print 1+2+4;        # Imprime 7.
    print(1+2) + 4;     # Imprime 3.
    print (1+2)+4;      # Também imprime 3!
    print +(1+2)+4;     # Imprime 7.
    print ((1+2)+4);    # Imprime 7.

Se você executa Perl com a opção B<-w> ele pode advertir você sobre isso. Por
exemplo a terceira linha acima produz:

    print (...) interpreted as function at - line 1.
    Useless use of integer addition in void context at - line 1.

Algumas funções não recebem absolutamente nenhum argumento, e portanto não
trabalham com unários nem operadores lista. Isto inclui funções como C<time> e
C<endpwent>. Por exemplo, C<time+86_400> sempre que dizer o mesmo que
C<time() + 86_400>.

Para funções que podem ser usadas em ambos contexto escalar e de lista, falhas
não abortivas são geralmente indicadas em um contexto escalar por retornar um
valor indefinido, e em um contexto de lista por retornar uma lista nula.

Lembre a importante regra a seguir: Não há B<nenhuma regra> que relaciona o
comportamento de uma expressão num contexto de lista com o seu comportamento em
contexto escalar, ou vice versa. Poderiam fazer coisas completamente
diferentes. Cada operador e função decidem que tipo de valor seria mais
apropriado para retornar em contexto escalar. Alguns operadores retornam o
tamanho da lista que teria sido retornada em contexto de lista. Outros
operadores retornam o primeiro elemento da lista. Outros operadores retornam o
último valor da lista. Outros operadores retornam o quantidade de operações bem
sucedidas. Em geral, eles fazer o que você quer, se você não quer consistência.

A named array in scalar context is quite different from what would at
first glance appear to be a list in scalar context.  You can't get a list
like C<(1,2,3)> into being in scalar context, because the compiler knows
the context at compile time.  It would generate the scalar comma operator
there, not the list construction version of the comma.  That means it
was never a list to start with.

Em geral, funções em Perl que servem como interface para chamadas de sistema de
mesmo nome (como chown(2), fork(2), closedir(2) etc. ) sempre retornam
verdadeiro quando bem sucedidas e C<undef> pelo contrário, como é habitualmente
mencionado nas descrições abaixo. Isto é diferente das interfaces em C, que
retornam C<-1> em falha. Exceções para esta regra são C<wait>, C<waitpid>, and
C<syscall>. Chamadas de sistemas também modificam a variável especial C<$!> em
falhas. Outras funções não executam, exceto acidentalmente.

=head2 Funções Perl por Categoria

Aqui estão as funções Perl (incluindo coisas que se parecem com funções, como
algumas palavras-chave e operadores nomeados) arranjados por categoria. Algumas
funções aparecem mais de uma vez.

=over 4

=item Funções para ESCALARes ou strings

C<chomp>, C<chop>, C<chr>, C<crypt>, C<hex>, C<index>, C<lc>, C<lcfirst>,
C<length>, C<oct>, C<ord>, C<pack>, C<q/STRING/>, C<qq/STRING/>, C<reverse>,
C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>

=item Expressões regulares e combinação de padrões

C<m//>, C<pos>, C<quotemeta>, C<s///>, C<split>, C<study>, C<qr//>

=item Funções Numéricas

C<abs>, C<atan2>, C<cos>, C<exp>, C<hex>, C<int>, C<log>, C<oct>, C<rand>,
C<sin>, C<sqrt>, C<srand>

=item Funções para @ARRAYs reais

C<pop>, C<push>, C<shift>, C<splice>, C<unshift>

=item Funções para lista de dados

C<grep>, C<join>, C<map>, C<qw/STRING/>, C<reverse>, C<sort>, C<unpack>

=item Funções para %HASHes reais

C<delete>, C<each>, C<exists>, C<keys>, C<values>

=item Funções de entrada e saída

C<binmode>, C<close>, C<closedir>, C<dbmclose>, C<dbmopen>, C<die>, C<eof>,
C<fileno>, C<flock>, C<format>, C<getc>, C<print>, C<printf>, C<read>,
C<readdir>, C<rewinddir>, C<seek>, C<seekdir>, C<select>, C<syscall>,
C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>, C<truncate>,
C<warn>, C<write>

=item Funções para dados de comprimento fixo ou registros

C<pack>, C<read>, C<syscall>, C<sysread>, C<syswrite>, C<unpack>, C<vec>

=item Funções para filehandles, arquivos, ou diretórios

C<-I<X>>, C<chdir>, C<chmod>, C<chown>, C<chroot>, C<fcntl>, C<glob>,
C<ioctl>, C<link>, C<lstat>, C<mkdir>, C<open>, C<opendir>,
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<sysopen>,
C<umask>, C<unlink>, C<utime>

=item Palavras-chave relacionadas ao controle de fluxo do seu programa perl

C<caller>, C<continue>, C<die>, C<do>, C<dump>, C<eval>, C<exit>,
C<goto>, C<last>, C<next>, C<redo>, C<return>, C<sub>, C<wantarray>

=item Keywords related to scoping

C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<use>

=item Funções variadas

C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>, C<reset>,
C<scalar>, C<undef>, C<wantarray>

=item Funções para processo e grupos de processos

C<alarm>, C<exec>, C<fork>, C<getpgrp>, C<getppid>, C<getpriority>, C<kill>,
C<pipe>, C<qx/STRING/>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
C<times>, C<wait>, C<waitpid>

=item Palavras-chave relacionadas a módulos perl

C<do>, C<import>, C<no>, C<package>, C<require>, C<use>

=item Palavras-chave relacionadas a classes e orientação a objetos

C<bless>, C<dbmclose>, C<dbmopen>, C<package>, C<ref>, C<tie>, C<tied>,
C<untie>, C<use>

=item Funções socket baixo-nível

C<accept>, C<bind>, C<connect>, C<getpeername>, C<getsockname>,
C<getsockopt>, C<listen>, C<recv>, C<send>, C<setsockopt>, C<shutdown>,
C<socket>, C<socketpair>

=item Funções de comunicação inter processo System V

C<msgctl>, C<msgget>, C<msgrcv>, C<msgsnd>, C<semctl>, C<semget>, C<semop>,
C<shmctl>, C<shmget>, C<shmread>, C<shmwrite>

=item Adquirindo informações de usuário e grupo

C<endgrent>, C<endhostent>, C<endnetent>, C<endpwent>, C<getgrent>,
C<getgrgid>, C<getgrnam>, C<getlogin>, C<getpwent>, C<getpwnam>,
C<getpwuid>, C<setgrent>, C<setpwent>

=item Adquirindo informações da rede

C<endprotoent>, C<endservent>, C<gethostbyaddr>, C<gethostbyname>,
C<gethostent>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getprotobyname>, C<getprotobynumber>, C<getprotoent>,
C<getservbyname>, C<getservbyport>, C<getservent>, C<sethostent>,
C<setnetent>, C<setprotoent>, C<setservent>

=item Funções relacionadas a tempo

C<gmtime>, C<localtime>, C<time>, C<times>

=item Funções novas no perl5

C<abs>, C<bless>, C<chomp>, C<chr>, C<exists>, C<formline>, C<glob>,
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>,
C<qx>, C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
C<tied>, C<uc>, C<ucfirst>, C<untie>, C<use>

* - C<sub> era uma palavra-chave no perl4, mas no perl5 é um operador, que pode
ser usado em expressões.

=item Funções obsoletas no perl5

C<dbmclose>, C<dbmopen>

=back

=head2 Portabilidade

Perl nasceu no Unix e pode portanto acessar todas as chamadas de sistema comuns
do Unix. Em ambientes não-Unix, a funcionalidade de algumas chamadas de sistema
podem não estar disponíveis, ou detalhes das funcionalidades disponíveis podem
ser ligeiramente diferentes. As funções Perl afetadas por isto são:

C<-X>, C<binmode>, C<chmod>, C<chown>, C<chroot>, C<crypt>,
C<dbmclose>, C<dbmopen>, C<dump>, C<endgrent>, C<endhostent>,
C<endnetent>, C<endprotoent>, C<endpwent>, C<endservent>, C<exec>,
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostbyname>,
C<gethostent>, C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getppid>, C<getprgp>, C<getpriority>, C<getprotobynumber>,
C<getprotoent>, C<getpwent>, C<getpwnam>, C<getpwuid>,
C<getservbyport>, C<getservent>, C<getsockopt>, C<glob>, C<ioctl>,
C<kill>, C<link>, C<lstat>, C<msgctl>, C<msgget>, C<msgrcv>,
C<msgsnd>, C<open>, C<pipe>, C<readlink>, C<rename>, C<select>, C<semctl>,
C<semget>, C<semop>, C<setgrent>, C<sethostent>, C<setnetent>,
C<setpgrp>, C<setpriority>, C<setprotoent>, C<setpwent>,
C<setservent>, C<setsockopt>, C<shmctl>, C<shmget>, C<shmread>,
C<shmwrite>, C<socket>, C<socketpair>,
C<stat>, C<symlink>, C<syscall>, C<sysopen>, C<system>,
C<times>, C<truncate>, C<umask>, C<unlink>,
C<utime>, C<wait>, C<waitpid>

Para mais informações sobre a portabilidade destas funções, veja
L<perlport> e outras documentações plataforma-específicas acessíveis.

=head2 Listagem Alfabética das Funções do Perl

=over 8

=item -X FILEHANDLE

=item -X EXPR

=item -X

Um testador de arquivo, onde X é uma das letras listadas abaixo. Este operador
unário recebe um argumento, ou um nome de arquivo ou um filehandle, e testa
associações ao arquivo para ver se alguma coisa é verdade sobre ele. Se o
argumento é omitido, testa C<$_>, exceto para C<-t>, que testa STDIN. A menos
que documentado o contrário, ele retorna C<1> para verdadeiro e C<''> para
falso, ou o valor indefinido se o arquivo não existe. Apesar dos nomes
esquisitos, a precedência é a mesma como qualquer outro operador unário, e o
argumento pode ter parênteses como qualquer outro operador unário. O operador
pode ser qualquer destes:
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>

    -r         Arquivo pode ser lido pelo efetivo uid/gid.
    -w         Arquivo pode ser escrito pelo efetivo uid/gid.
    -x         Arquivo pode ser executado pelo efetivo uid/gid.
    -o         Arquivo é propriedade do efetivo uid.

    -R         Arquivo pode ser lido pelo real uid/gid.
    -W         Arquivo pode ser escrito pelo real uid/gid.
    -X         Arquivo pode ser executado pelo real uid/gid.
    -O         Arquivo é propriedade do real uid.

    -e         Arquivo existe.
    -z         Arquivo tem tamanho zero (é vazio).
    -s         Arquivo tem tamanho não-zero (retorna o tamanho em bytes).

    -f         Arquivo é um arquivo simples.
    -d         Arquivo é um diretório.
    -l         Arquivo é um link simbólico.
    -p         Arquivo é um pipe nomeado (FIFO)pipe (FIFO), or Filehandle é um pipe.
    -S         Arquivo é um socket.
    -b         Arquivo é um arquivo especial de bloco.
    -c         Arquivo é um arquivo especial de caractere.
    -t         Filehandle está aberto para um tty.

    -u         Arquivo tem o bit setuid marcado.
    -g         Arquivo tem o bit setgid marcado.
    -k         Arquivo tem o bit sticky marcado.

    -T         Arquivo é um arquivo de texto ASCII (avaliação heurística).
    -B         Arquivo é um arquivo "binário" (inverso de -T).

    -M         Data de início do script menos data de modificação do arquivo, em dias.
    -A         O mesmo para data de acesso.
    -C         O mesmo para data de alteração do inode (Unix, pode divergir de outras plataformas)

Exemplo:

    while (<>) {
         chomp;
         next unless -f $_;         # ignora arquivos especiais
         #...
    }

A interpretação dos operadores de permissão de arquivos C<-r>, C<-R>, C<-w>,
C<-W>, C<-x>, e C<-X> são por padrão baseados meramente no modo do arquivo e
uids e gids do usuário. Haveria outras causas para você não conseguir
efetivamente ler, escrever, ou executar o arquivo. Tais causas podem ser por
exemplo controle de acesso em sistemas de arquivos em rede, ACLs (listas de
controle de acesso), sistemas de arquivos somente-leitura, e formatos
executáveis desconhecidos.

Ainda tome nota que, para o superusuário no sistema de arquivos local, os
testes C<-r>, C<-R>, C<-w>, e C<-W> sempre retornam 1, e C<-x> e C<-X> retornam
1 se algum bit executável está marcado no modo. Scripts executados pelo
superusuário podem de algum modo necessitar fazer um stat() para determinar o
modo atual do arquivo, ou temporariamente ajustar o efetivo uid para alguma
coisa diferente.

Se você está usando ACLs, há um pragma chamado C<filetest> que pode
proporcionar resultados mais apurados que o básico modo de bits stat(). Quando
sob o C<use filetest 'access'> os testes em arquivo acima mencionados testarão
se as permissões podem (ou não) ser concedidas usando a família de chamadas de
sistema access(). Também note que se C<-x> e C<-X> podem sob este pragma
retornar verdadeiro mesmo se não haja bits de permissão de execução (nem
qualquer extra permissão de execução ACLs).
This strangeness is due to the underlying system calls' definitions.
Leia a documentação para o pragma C<filetest> para mais informações.

Note que C<-s/a/b/> não faz executar uma substituição negada. Foi proferido até
agora que C<-exp($foo)> trabalha como o esperado, contudo--somente letras
únicas seguidas pelo hífen são interpretadas como testes em arquivo.

The C<-T> and C<-B> switches work as follows.  The first block or so of the
file is examined for odd characters such as strange control codes or
characters with the high bit set.  If too many strange characters (>30%)
are found, it's a C<-B> file, otherwise it's a C<-T> file.  Also, any file
containing null in the first block is considered a binary file.  If C<-T>
or C<-B> is used on a filehandle, the current IO buffer is examined
rather than the first block.  Both C<-T> and C<-B> return true on a null
file, or a file at EOF when testing a filehandle.  Because you have to
read a file to do the C<-T> test, on most occasions you want to use a C<-f>
against the file first, as in C<next unless -f $file && -T $file>.

Se qualquer teste em arquivo (ou os operadores C<stat> ou C<lstat>) recebem um
filehandle especial consistindo de um solitário underline, então a estrutura
stat do precedente teste em arquivo (ou operador stat) é usada, poupando uma
chamada de sistema. (Isto não funciona com C<-t>, e você precisa se lembrar que
lstat() e C<-l> testarão valores na estrutura stat para ligações simbólicas,
não o arquivo real.) (Também, se a memória temporária do stat estiver completa
por uma chamada C<lstat>, C<-T> e C<-B> irá apagar os resultados do C<stat _>).
Exemplo:

    print "Can do.\n" if -r $a || -w _ || -x _;

    stat($filename);
    print "Readable\n" if -r _;
    print "Writable\n" if -w _;
    print "Executable\n" if -x _;
    print "Setuid\n" if -u _;
    print "Setgid\n" if -g _;
    print "Sticky\n" if -k _;
    print "Text\n" if -T _;
    print "Binary\n" if -B _;

=item abs VALOR

=item abs

Retorna o valor absoluto do seu argumento. Se VALOR é omitido, usa C<$_>.

=item accept NEWSOCKET,GENERICSOCKET

Accepts an incoming socket connect, just as the accept(2) system call
does.  Returns the packed address if it succeeded, false otherwise.
See the example in L<perlipc/"Sockets: Client/Server Communication">.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See L<perlvar/$^F>.

=item alarm SECONDS

=item alarm

Arranges to have a SIGALRM delivered to this process after the
specified number of wallclock seconds have elapsed.  If SECONDS is not
specified, the value stored in C<$_> is used. (On some machines,
unfortunately, the elapsed time may be up to one second less or more
than you specified because of how seconds are counted, and process
scheduling may delay the delivery of the signal even further.)

Only one timer may be counting at once.  Each call disables the
previous timer, and an argument of C<0> may be supplied to cancel the
previous timer without starting a new one.  The returned value is the
amount of time remaining on the previous timer.

For delays of finer granularity than one second, you may use Perl's
four-argument version of select() leaving the first three arguments
undefined, or you might be able to use the C<syscall> interface to
access setitimer(2) if your system supports it.  The Time::HiRes
module (from CPAN, and starting from Perl 5.8 part of the standard
distribution) may also prove useful.

It is usually a mistake to intermix C<alarm> and C<sleep> calls.
(C<sleep> may be internally implemented in your system with C<alarm>)

If you want to use C<alarm> to time out a system call you need to use an
C<eval>/C<die> pair.  You can't rely on the alarm causing the system call to
fail with C<$!> set to C<EINTR> because Perl sets up signal handlers to
restart system calls on some systems.  Using C<eval>/C<die> always works,
modulo the caveats given in L<perlipc/"Signals">.

    eval {
         local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
         alarm $timeout;
         $nread = sysread SOCKET, $buffer, $size;
         alarm 0;
    };
    if ($@) {
         die unless $@ eq "alarm\n";   # propagate unexpected errors
             # timed out
    }
    else {
             # didn't
    }

For more information see L<perlipc>.

=item atan2 Y,X

Retorna o arco tangente de Y/X no intervalo -PI a PI.

Para calcular a tangente, você pode usar a função C<Math::Trig::tan>
ou a seguinte relação:

    sub tan { sin($_[0]) / cos($_[0])  }

=item bind SOCKET,NAME

Binds a network address to a socket, just as the bind system call
does.  Returns true if it succeeded, false otherwise.  NAME should be a
packed address of the appropriate type for the socket.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

=item binmode FILEHANDLE, LAYER

=item binmode FILEHANDLE

Arranges for FILEHANDLE to be read or written in "binary" or "text"
mode on systems where the run-time libraries distinguish between
binary and text files.  If FILEHANDLE is an expression, the value is
taken as the name of the filehandle.  Returns true on success,
otherwise it returns C<undef> and sets C<$!> (errno).

On some systems (in general, DOS and Windows-based systems) binmode()
is necessary when you're not working with a text file.  For the sake
of portability it is a good idea to always use it when appropriate,
and to never use it when it isn't appropriate.  Also, people can
set their I/O to be by default UTF-8 encoded Unicode, not bytes.

In other words: regardless of platform, use binmode() on binary data,
like for example images.

If LAYER is present it is a single string, but may contain multiple
directives. The directives alter the behaviour of the file handle.
When LAYER is present using binmode on text file makes sense.

If LAYER is omitted or specified as C<:raw> the filehandle is made
suitable for passing binary data. This includes turning off possible CRLF
translation and marking it as bytes (as opposed to Unicode characters).
Note that, despite what may be implied in I<"Programming Perl"> (the
Camel) or elsewhere, C<:raw> is I<not> the simply inverse of C<:crlf>
-- other layers which would affect binary nature of the stream are
I<also> disabled. See L<PerlIO>, L<perlrun> and the discussion about the
PERLIO environment variable.

The C<:bytes>, C<:crlf>, and C<:utf8>, and any other directives of the
form C<:...>, are called I/O I<layers>.  The C<open> pragma can be used to
establish default I/O layers.  See L<open>.

I<The LAYER parameter of the binmode() function is described as "DISCIPLINE"
in "Programming Perl, 3rd Edition".  However, since the publishing of this
book, by many known as "Camel III", the consensus of the naming of this
functionality has moved from "discipline" to "layer".  All documentation
of this version of Perl therefore refers to "layers" rather than to
"disciplines".  Now back to the regularly scheduled documentation...>

To mark FILEHANDLE as UTF-8, use C<:utf8>.

In general, binmode() should be called after open() but before any I/O
is done on the filehandle.  Calling binmode() will normally flush any
pending buffered output data (and perhaps pending input data) on the
handle.  An exception to this is the C<:encoding> layer that
changes the default character encoding of the handle, see L<open>.
The C<:encoding> layer sometimes needs to be called in
mid-stream, and it doesn't flush the stream.  The C<:encoding>
also implicitly pushes on top of itself the C<:utf8> layer because
internally Perl will operate on UTF-8 encoded Unicode characters.

The operating system, device drivers, C libraries, and Perl run-time
system all work together to let the programmer treat a single
character (C<\n>) as the line terminator, irrespective of the external
representation.  On many operating systems, the native text file
representation matches the internal representation, but on some
platforms the external representation of C<\n> is made up of more than
one character.

Mac OS, all variants of Unix, and Stream_LF files on VMS use a single
character to end each line in the external representation of text (even
though that single character is CARRIAGE RETURN on Mac OS and LINE FEED
on Unix and most VMS files). In other systems like OS/2, DOS and the
various flavors of MS-Windows your program sees a C<\n> as a simple C<\cJ>,
but what's stored in text files are the two characters C<\cM\cJ>.  That
means that, if you don't use binmode() on these systems, C<\cM\cJ>
sequences on disk will be converted to C<\n> on input, and any C<\n> in
your program will be converted back to C<\cM\cJ> on output.  This is what
you want for text files, but it can be disastrous for binary files.

Another consequence of using binmode() (on some systems) is that
special end-of-file markers will be seen as part of the data stream.
For systems from the Microsoft family this means that if your binary
data contains C<\cZ>, the I/O subsystem will regard it as the end of
the file, unless you use binmode().

binmode() is not only important for readline() and print() operations,
but also when using read(), seek(), sysread(), syswrite() and tell()
(see L<perlport> for more details).  See the C<$/> and C<$\> variables
in L<perlvar> for how to manually set your input and output
line-termination sequences.

=item bless REF,CLASSNAME

=item bless REF

This function tells the thingy referenced by REF that it is now an object
in the CLASSNAME package.  If CLASSNAME is omitted, the current package
is used.  Because a C<bless> is often the last thing in a constructor,
it returns the reference for convenience.  Always use the two-argument
version if the function doing the blessing might be inherited by a
derived class.  See L<perltoot> and L<perlobj> for more about the blessing
(and blessings) of objects.

Consider always blessing objects in CLASSNAMEs that are mixed case.
Namespaces with all lowercase names are considered reserved for
Perl pragmata.  Builtin types have all uppercase names, so to prevent
confusion, you may wish to avoid such package names as well.  Make sure
that CLASSNAME is a true value.

See L<perlmod/"Perl Modules">.

=item caller EXPR

=item caller

Returns the context of the current subroutine call.  In scalar context,
returns the caller's package name if there is a caller, that is, if
we're in a subroutine or C<eval> or C<require>, and the undefined value
otherwise.  In list context, returns

    ($package, $filename, $line) = caller;

With EXPR, it returns some extra information that the debugger uses to
print a stack trace.  The value of EXPR indicates how many call frames
to go back before the current one.

    ($package, $filename, $line, $subroutine, $hasargs,
    $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);

Here $subroutine may be C<(eval)> if the frame is not a subroutine
call, but an C<eval>.  In such a case additional elements $evaltext and
C<$is_require> are set: C<$is_require> is true if the frame is created by a
C<require> or C<use> statement, $evaltext contains the text of the
C<eval EXPR> statement.  In particular, for an C<eval BLOCK> statement,
$filename is C<(eval)>, but $evaltext is undefined.  (Note also that
each C<use> statement creates a C<require> frame inside an C<eval EXPR>
frame.)  $subroutine may also be C<(unknown)> if this particular
subroutine happens to have been deleted from the symbol table.
C<$hasargs> is true if a new instance of C<@_> was set up for the frame.
C<$hints> and C<$bitmask> contain pragmatic hints that the caller was
compiled with.  The C<$hints> and C<$bitmask> values are subject to change
between versions of Perl, and are not meant for external use.

Furthermore, when called from within the DB package, caller returns more
detailed information: it sets the list variable C<@DB::args> to be the
arguments with which the subroutine was invoked.

Be aware that the optimizer might have optimized call frames away before
C<caller> had a chance to get the information.  That means that C<caller(N)>
might not return information about the call frame you expect it do, for
C<< N > 1 >>.  In particular, C<@DB::args> might have information from the
previous time C<caller> was called.

=item chdir EXPR

Muda para o diretório de trabalho para EXPR, se possível. Se EXPR for omitido,
muda para o diretório especificado em C<$ENV{HOME}>, se definido; se não, muda
para o diretório especificado por C<$ENV{LOGDIR}>. (Sobre VMS, a variável
C<$ENV{SYS$LOGIN}> também é verificada, e usada se estiver definida.) Se
nenhuma estiver definida, C<chdir> não faz nada. Ele retorna true em caso de
sucesso, e falso do contrário. Veja o exemplo abaixo C<die>.

=item chmod LISTA

Muda as permissões de uma lista de arquivos. O primeiro elemento da lista deve
ser o modo numérico, que deve ser provavelmente um número octal, e que
definitivamente I<não> deve ser um string de dígitos octais: C<0644> está de
acordo, C<'0644'> não está. Retorna o número de arquivos alterados com sucesso.
Veja também L</oct>, se tudo que você tem é uma string.

    $cnt = chmod 0755, 'foo', 'bar';
    chmod 0755, @executables;
    $mode = '0644'; chmod $mode, 'foo';      # !!! muda o modo para
                                             # --w----r-T
    $mode = '0644'; chmod oct($mode), 'foo'; # Assim melhora
    $mode = 0644;   chmod $mode, 'foo';      # Assim é melhor

Você também pode importar a constante simbólica C<S_I*> para o módulo Fcntl:

    use Fcntl ':mode';

    chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @executables;
    # Isto é idêntico ao chmod 0755 dos exemplos acima.

=item chomp VARIAVEL

=item chomp( LISTA )

=item chomp

Esta versão segura de L</chop> remove qualquer final de string que corresponder
ao valor corrente de C<$/> (também conhecido como $INPUT_RECORD_SEPARATOR no
módulo C<English>). Ele retorna o número total de caracteres removidos para
todos os seus argumentos. É frequentemente usado para remover a nova linha de
final de um registro de entrada quando você está preocupado que naquele final
de registro estaria faltando sua nova linha. Quando em modo parágrafo (C<$/ =
"">), remove-se todas as novas linhas finais da string. Quando em modo slurp
(C<$/ = undef>) ou em modo de registro de comprimento-fixo (C<$/>) é uma
referência a um inteiro ou algo parecido, veja L<perlvar>) chomp() não remove
nada. Se VARIAVEL é omitida, remove de <$_>. Exemplo:

    while (<>) {
         chomp;         # previne \n no último campo
         @array = split(/:/);
         # ...
    }

Se VARIAVEL é um hash, remove dos valores do hash, mas não em suas chaves.

Atualmente você pode usar chomp em alguma coisa que seja um lvalue, incluindo
uma atribuição:

    chomp($cwd = `pwd`);
    chomp($answer = <STDIN>);

Se você usar chomp numa lista, em cada elemento é aplicado chomp, e o número
total de caracteres removidos é retornado.

Se o pragma C<encoding> está no escopo então o comprimento retornado é
calculado para o comprimento de C<$/> em caracteres Unicode, o qual nem sempre
é o mesmo comprimento de C<$/> no encoding nativo.

Note que parênteses são necessário quando você está usando chomp em qualquer
coisa que não seja uma simples variável. Isto é porque C<chomp $cwd = `pwd`;> é
interpretado como C<(chomp $cwd) = `pwd`;>, ao invés de C<chomp( $cwd = `pwd`)>
que você melhor esperava. Similarmente, C<chomp $a, $b> é interpretado como
C<chomp($a), $b> ao invés de C<chomp($a, $b)>.

=item chop VARIAVEL

=item chop( LISTA )

=item chop

Remove o último caractere da string e retorna o caractere removido. É muito
mais eficiente que C<s/.$//s> porque não examina nem copia a string. Se
VARIAVEL é omitida, remove de C<$_>. Se VARIABLE é um hash, remove dos valores
do hash, mas não de seus chaves. Atualmente você pode usar chop em qualquer
coisa que seja um lvalue, incluindo uma atribuição.

Se você usar chop numa lista, em cada elemento é aplicado chop, Somente o valor
do último C<chop> é retornado.

Note que C<chop> retorna o último caractere. Para retornar todos menos o último
caractere, use C<substr($string, 0, -1)>.

Veja também L</chomp>.

=item chown LISTA

Modifica o proprietário (e grupo) de uma lista de arquivos. Os primeiros dois
elementos da lista devem ser o uid e gid I<numéricos>. nesta ordem. Um valor de
-1 em uma ou outra posição é interpretada por muitos sistemas para deixar o
valor inalterado. Retorna o número de arquivos modificados com sucesso.

    $cnt = chown $uid, $gid, 'foo', 'bar';
    chown $uid, $gid, @filenames;

Here's an example that looks up nonnumeric uids in the passwd file:

    print "User: ";
    chomp($user = <STDIN>);
    print "Files: ";
    chomp($pattern = <STDIN>);

    ($login,$pass,$uid,$gid) = getpwnam($user)
         or die "$user not in passwd file";

    @ary = glob($pattern);         # expande nomes de arquivo
    chown $uid, $gid, @ary;

Em muitos sistemas, você não está permitido a modificar a posse do arquivo a
não ser que você seja o superusuário, ainda que você esteja habilitado a
modificar o grupo para algum de seus grupos secundários. Em sistemas inseguros,
essas restrições podem ser abrandadas, mas isto não é uma suposição portável.
Em sistemas POSIX, você pode detectar esta condição dessa forma:

    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
    $can_chown_giveaway = not sysconf(_PC_CHOWN_RESTRICTED);

=item chr NUMERO

=item chr

Retorna o caractere representado por NUMERO no conjunto de caracteres. Por
exemplo, C<chr(65)> é C<"A> em ambos ASCII ou Unicode, e chr(0x263a) é um
caractere sorriso Unicode. Note que caracteres de 128 a 255 (inclusive) são por padrão não
é codificado em UTF-8 Unicode para retardar motivos de compatibilidade (mas
veja L<encoding>).

Se número é omitido, usa C<$_>.

Para o inverso, use L</ord>.

Note que sob o pragma C<bytes> o NUMERO é mascarado para baixo oito bits.

Veja L<perlunicode> e L<encoding> para mais a cerca de Unicode.

=item chroot DIRETORIO

=item chroot

Essa função opera igual a chamada de sistema de mesmo nome: ela faz com que o
diretório indicado se torne o novo diretório raiz para todos os futuros caminhos
que começaren com C</> pelo seu processo e todos os seus subprocessos. (Isso não
modifica o seu diretório de trabalho atual, que permanece inalterado.) Por razões de
segurança, essa chamada é restrita ao super usuário. Se DIRETORIO for omitiod,
realiza um C<chroot> para C<$_>.

=item close FILEHANDLE

=item close

Fecha o arquivo ou pipe associado ao file handle, retornando verdadeiro somente
se a área de memória de E/S for limpa e fechado o descritor de arquivo com
sucesso. Fecha o filehandle corrente selecionado se o argumento é omitido.

Você não precia fechar o FILEHANDLE se você vai realizar imediatamente outro
C<open> utilizando um FILEHANDLE já aberto, pois o C<open> irá fechar ele para
você. (Veja C<open>.) De qualquer jeito, um C<close> explícito em um arquivo de entrada
reinicia o contador de linha (C<$.>), enquanto um close implícito feito pelo C<open> não.

If the file handle came from a piped open, C<close> will additionally
return false if one of the other system calls involved fails, or if the
program exits with non-zero status.  (If the only problem was that the
program exited non-zero, C<$!> will be set to C<0>.)  Closing a pipe
also waits for the process executing on the pipe to complete, in case you
want to look at the output of the pipe afterwards, and
implicitly puts the exit status value of that command into C<$?>.

Prematurely closing the read end of a pipe (i.e. before the process
writing to it at the other end has closed it) will result in a
SIGPIPE being delivered to the writer.  If the other end can't
handle that, be sure to read all the data before closing the pipe.

Example:

    open(OUTPUT, '|sort >foo')  # pipe to sort
        or die "Can't start sort: $!";
    #...                           # print stuff to output
    close OUTPUT                  # wait for sort to finish
        or warn $! ? "Error closing sort pipe: $!"
                   : "Exit status $? from sort";
    open(INPUT, 'foo')                  # get sort's results
        or die "Can't open 'foo' for input: $!";

FILEHANDLE may be an expression whose value can be used as an indirect
filehandle, usually the real filehandle name.

=item closedir DIRHANDLE

Fecha o diretório aberto por C<opendir> e retorna o sucesso desta chamada de
sistema.

=item connect SOCKET,NAME

Attempts to connect to a remote socket, just as the connect system call
does.  Returns true if it succeeded, false otherwise.  NAME should be a
packed address of the appropriate type for the socket.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

=item continue BLOCK

Actually a flow control statement rather than a function.  If there is a
C<continue> BLOCK attached to a BLOCK (typically in a C<while> or
C<foreach>), it is always executed just before the conditional is about to
be evaluated again, just like the third part of a C<for> loop in C.  Thus
it can be used to increment a loop variable, even when the loop has been
continued via the C<next> statement (which is similar to the C C<continue>
statement).

C<last>, C<next>, or C<redo> may appear within a C<continue>
block.  C<last> and C<redo> will behave as if they had been executed within
the main block.  So will C<next>, but since it will execute a C<continue>
block, it may be more entertaining.

    while (EXPR) {
         ### redo always comes here
         do_something;
    } continue {
         ### next always comes here
         do_something_else;
         # then back the top to re-check EXPR
    }
    ### last always comes here

Omitting the C<continue> section is semantically equivalent to using an
empty one, logically enough.  In that case, C<next> goes directly back
to check the condition at the top of the loop.

=item cos EXPR

=item cos

Retorna o coseno de EXPR (em radianos). Se EXPR for omitido, retorna o
coseno de C<$_>.

Para o inverso do coseno, você pode utilizar a função C<Math::Trig::acos()>
ou utilizar a seguinte relação:

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }

=item crypt PLAINTEXT,SALT

Encrypts a string exactly like the crypt(3) function in the C library
(assuming that you actually have a version there that has not been
extirpated as a potential munition).  This can prove useful for checking
the password file for lousy passwords, amongst other things.  Only the
guys wearing white hats should do this.

Note that L<crypt|/crypt> is intended to be a one-way function, much like
breaking eggs to make an omelette.  There is no (known) corresponding
decrypt function (in other words, the crypt() is a one-way hash
function).  As a result, this function isn't all that useful for
cryptography.  (For that, see your nearby CPAN mirror.)

When verifying an existing encrypted string you should use the
encrypted text as the salt (like C<crypt($plain, $crypted) eq
$crypted>).  This allows your code to work with the standard L<crypt|/crypt>
and with more exotic implementations.  In other words, do not assume
anything about the returned string itself, or how many bytes in
the encrypted string matter.

Traditionally the result is a string of 13 bytes: two first bytes of
the salt, followed by 11 bytes from the set C<[./0-9A-Za-z]>, and only
the first eight bytes of the encrypted string mattered, but
alternative hashing schemes (like MD5), higher level security schemes
(like C2), and implementations on non-UNIX platforms may produce
different strings.

When choosing a new salt create a random two character string whose
characters come from the set C<[./0-9A-Za-z]> (like C<join '', ('.',
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).  This set of
characters is just a recommendation; the characters allowed in
the salt depend solely on your system's crypt library, and Perl can't
restrict what salts C<crypt()> accepts.

Here's an example that makes sure that whoever runs this program knows
their own password:

    $pwd = (getpwuid($<))[1];

    system "stty -echo";
    print "Password: ";
    chomp($word = <STDIN>);
    print "\n";
    system "stty echo";

    if (crypt($word, $pwd) ne $pwd) {
         die "Sorry...\n";
    } else {
         print "ok\n";
    }

Of course, typing in your own password to whoever asks you
for it is unwise.

The L<crypt|/crypt> function is unsuitable for encrypting large quantities
of data, not least of all because you can't get the information
back.  Look at the F<by-module/Crypt> and F<by-module/PGP> directories
on your favorite CPAN mirror for a slew of potentially useful
modules.

If using crypt() on a Unicode string (which I<potentially> has
characters with codepoints above 255), Perl tries to make sense
of the situation by trying to downgrade (a copy of the string)
the string back to an eight-bit byte string before calling crypt()
(on that copy).  If that works, good.  If not, crypt() dies with
C<Wide character in crypt>.

=item dbmclose HASH

[Essa função tem sido amplamente substituída pela função C<untie>.]

Quebra a ligação entre um arquivo DBM e um hash.

=item dbmopen HASH,DBNAME,MASK

[This function has been largely superseded by the C<tie> function.]

This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a
hash.  HASH is the name of the hash.  (Unlike normal C<open>, the first
argument is I<not> a filehandle, even though it looks like one).  DBNAME
is the name of the database (without the F<.dir> or F<.pag> extension if
any).  If the database does not exist, it is created with protection
specified by MASK (as modified by the C<umask>).  If your system supports
only the older DBM functions, you may perform only one C<dbmopen> in your
program.  In older versions of Perl, if your system had neither DBM nor
ndbm, calling C<dbmopen> produced a fatal error; it now falls back to
sdbm(3).

If you don't have write access to the DBM file, you can only read hash
variables, not set them.  If you want to test whether you can write,
either use file tests or try setting a dummy hash entry inside an C<eval>,
which will trap the error.

Note that functions such as C<keys> and C<values> may return huge lists
when used on large DBM files.  You may prefer to use the C<each>
function to iterate over large DBM files.  Example:

    # print out history file offsets
    dbmopen(%HIST,'/usr/lib/news/history',0666);
    while (($key,$val) = each %HIST) {
         print $key, ' = ', unpack('L',$val), "\n";
    }
    dbmclose(%HIST);

See also L<AnyDBM_File> for a more general description of the pros and
cons of the various dbm approaches, as well as L<DB_File> for a particularly
rich implementation.

You can control which DBM library you use by loading that library
before you call dbmopen():

    use DB_File;
    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
         or die "Can't open netscape history file: $!";

=item defined EXPR

=item defined

Returns a Boolean value telling whether EXPR has a value other than
the undefined value C<undef>.  If EXPR is not present, C<$_> will be
checked.

Many operations return C<undef> to indicate failure, end of file,
system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish C<undef> from
other values.  (A simple Boolean test will not distinguish among
C<undef>, zero, the empty string, and C<"0">, which are all equally
false.)  Note that since C<undef> is a valid scalar, its presence
doesn't I<necessarily> indicate an exceptional condition: C<pop>
returns C<undef> when its argument is an empty array, I<or> when the
element to return happens to be C<undef>.

You may also use C<defined(&func)> to check whether subroutine C<&func>
has ever been defined.  The return value is unaffected by any forward
declarations of C<&func>.  Note that a subroutine which is not defined
may still be callable: its package may have an C<AUTOLOAD> method that
makes it spring into existence the first time that it is called -- see
L<perlsub>.

Use of C<defined> on aggregates (hashes and arrays) is deprecated.  It
used to report whether memory for that aggregate has ever been
allocated.  This behavior may disappear in future versions of Perl.
You should instead use a simple test for size:

    if (@an_array) { print "has array elements\n" }
    if (%a_hash)   { print "has hash members\n"   }

When used on a hash element, it tells you whether the value is defined,
not whether the key exists in the hash.  Use L</exists> for the latter
purpose.

Examples:

    print if defined $switch{'D'};
    print "$val\n" while defined($val = pop(@ary));
    die "Can't readlink $sym: $!"
         unless defined($value = readlink $sym);
    sub foo { defined &$bar ? &$bar(@_) : die "No bar"; }
    $debugging = 0 unless defined $debugging;

Note:  Many folks tend to overuse C<defined>, and then are surprised to
discover that the number C<0> and C<""> (the zero-length string) are, in fact,
defined values.  For example, if you say

    "ab" =~ /a(.*)b/;

The pattern match succeeds, and C<$1> is defined, despite the fact that it
matched "nothing".  But it didn't really match nothing--rather, it
matched something that happened to be zero characters long.  This is all
very above-board and honest.  When a function returns an undefined value,
it's an admission that it couldn't give you an honest answer.  So you
should use C<defined> only when you're questioning the integrity of what
you're trying to do.  At other times, a simple comparison to C<0> or C<""> is
what you want.

See also L</undef>, L</exists>, L</ref>.

=item delete EXPR

Given an expression that specifies a hash element, array element, hash slice,
or array slice, deletes the specified element(s) from the hash or array.
In the case of an array, if the array elements happen to be at the end,
the size of the array will shrink to the highest element that tests
true for exists() (or 0 if no such element exists).

Returns a list with the same number of elements as the number of elements
for which deletion was attempted.  Each element of that list consists of
either the value of the element deleted, or the undefined value.  In scalar
context, this means that you get the value of the last element deleted (or
the undefined value if that element did not exist).

    %hash = (foo => 11, bar => 22, baz => 33);
    $scalar = delete $hash{foo};             # $scalar is 11
    $scalar = delete @hash{qw(foo bar)};     # $scalar is 22
    @array  = delete @hash{qw(foo bar baz)}; # @array  is (undef,undef,33)

Deleting from C<%ENV> modifies the environment.  Deleting from
a hash tied to a DBM file deletes the entry from the DBM file.  Deleting
from a C<tie>d hash or array may not necessarily return anything.

Deleting an array element effectively returns that position of the array
to its initial, uninitialized state.  Subsequently testing for the same
element with exists() will return false.  Note that deleting array
elements in the middle of an array will not shift the index of the ones
after them down--use splice() for that.  See L</exists>.

The following (inefficiently) deletes all the values of %HASH and @ARRAY:

    foreach $key (keys %HASH) {
         delete $HASH{$key};
    }

    foreach $index (0 .. $#ARRAY) {
         delete $ARRAY[$index];
    }

And so do these:

    delete @HASH{keys %HASH};

    delete @ARRAY[0 .. $#ARRAY];

But both of these are slower than just assigning the empty list
or undefining %HASH or @ARRAY:

    %HASH = ();                  # completely empty %HASH
    undef %HASH;         # forget %HASH ever existed

    @ARRAY = ();         # completely empty @ARRAY
    undef @ARRAY;         # forget @ARRAY ever existed

Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash element, array element,  hash slice, or array slice
lookup:

    delete $ref->[$x][$y]{$key};
    delete @{$ref->[$x][$y]}{$key1, $key2, @morekeys};

    delete $ref->[$x][$y][$index];
    delete @{$ref->[$x][$y]}[$index1, $index2, @moreindices];

=item die LISTA

Outside an C<eval>, prints the value of LIST to C<STDERR> and
exits with the current value of C<$!> (errno).  If C<$!> is C<0>,
exits with the value of C<<< ($? >> 8) >>> (backtick `command`
status).  If C<<< ($? >> 8) >>> is C<0>, exits with C<255>.  Inside
an C<eval(),> the error message is stuffed into C<$@> and the
C<eval> is terminated with the undefined value.  This makes
C<die> the way to raise an exception.

Equivalent examples:

    die "Can't cd to spool: $!\n" unless chdir '/usr/spool/news';
    chdir '/usr/spool/news' or die "Can't cd to spool: $!\n"

If the last element of LIST does not end in a newline, the current
script line number and input line number (if any) are also printed,
and a newline is supplied.  Note that the "input line number" (also
known as "chunk") is subject to whatever notion of "line" happens to
be currently in effect, and is also available as the special variable
C<$.>.  See L<perlvar/"$/"> and L<perlvar/"$.">.

Hint: sometimes appending C<", stopped"> to your message will cause it
to make better sense when the string C<"at foo line 123"> is appended.
Suppose you are running script "canasta".

    die "/etc/games is no good";
    die "/etc/games is no good, stopped";

produce, respectively

    /etc/games is no good at canasta line 123.
    /etc/games is no good, stopped at canasta line 123.

See also exit(), warn(), and the Carp module.

If LIST is empty and C<$@> already contains a value (typically from a
previous eval) that value is reused after appending C<"\t...propagated">.
This is useful for propagating exceptions:

    eval { ... };
    die unless $@ =~ /Expected exception/;

If LIST is empty and C<$@> contains an object reference that has a
C<PROPAGATE> method, that method will be called with additional file
and line number parameters.  The return value replaces the value in
C<$@>.  ie. as if C<< $@ = eval { $@->PROPAGATE(__FILE__, __LINE__) }; >>
were called.

If C<$@> is empty then the string C<"Died"> is used.

die() can also be called with a reference argument.  If this happens to be
trapped within an eval(), $@ contains the reference.  This behavior permits
a more elaborate exception handling implementation using objects that
maintain arbitrary state about the nature of the exception.  Such a scheme
is sometimes preferable to matching particular string values of $@ using
regular expressions.  Here's an example:

    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
    if ($@) {
        if (ref($@) && UNIVERSAL::isa($@,"Some::Module::Exception")) {
            # handle Some::Module::Exception
        }
        else {
            # handle all other possible exceptions
        }
    }

Because perl will stringify uncaught exception messages before displaying
them, you may want to overload stringification operations on such custom
exception objects.  See L<overload> for details about that.

You can arrange for a callback to be run just before the C<die>
does its deed, by setting the C<$SIG{__DIE__}> hook.  The associated
handler will be called with the error text and can change the error
message, if it sees fit, by calling C<die> again.  See
L<perlvar/$SIG{expr}> for details on setting C<%SIG> entries, and
L<"eval BLOCK"> for some examples.  Although this feature was meant
to be run only right before your program was to exit, this is not
currently the case--the C<$SIG{__DIE__}> hook is currently called
even inside eval()ed blocks/strings!  If one wants the hook to do
nothing in such situations, put

         die @_ if $^S;

as the first line of the handler (see L<perlvar/$^S>).  Because
this promotes strange action at a distance, this counterintuitive
behavior may be fixed in a future release.

=item do BLOCO

Not really a function.  Returns the value of the last command in the
sequence of commands indicated by BLOCK.  When modified by a loop
modifier, executes the BLOCK once before testing the loop condition.
(On other statements the loop modifiers test the conditional first.)

C<do BLOCK> does I<not> count as a loop, so the loop control statements
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.
See L<perlsyn> for alternative strategies.

=item do SUBROTINA(LISTA)

Uma forma obsoleta de realiza uma chamada a uma subrotina. Veja L<perlsub>.

=item do EXPR

Uses the value of EXPR as a filename and executes the contents of the
file as a Perl script.

    do 'stat.pl';

is just like

    eval `cat stat.pl`;

except that it's more efficient and concise, keeps track of the current
filename for error messages, searches the @INC directories, and updates
C<%INC> if the file is found.  See L<perlvar/Predefined Names> for these
variables.  It also differs in that code evaluated with C<do FILENAME>
cannot see lexicals in the enclosing scope; C<eval STRING> does.  It's the
same, however, in that it does reparse the file every time you call it,
so you probably don't want to do this inside a loop.

If C<do> cannot read the file, it returns undef and sets C<$!> to the
error.  If C<do> can read the file but cannot compile it, it
returns undef and sets an error message in C<$@>.   If the file is
successfully compiled, C<do> returns the value of the last expression
evaluated.

Note that inclusion of library modules is better done with the
C<use> and C<require> operators, which also do automatic error checking
and raise an exception if there's a problem.

You might like to use C<do> to read in a program configuration
file.  Manual error checking can be done this way:

    # read in config files: system first, then user
    for $file ("/share/prog/defaults.rc",
               "$ENV{HOME}/.someprogrc")
   {
         unless ($return = do $file) {
             warn "couldn't parse $file: $@" if $@;
             warn "couldn't do $file: $!"    unless defined $return;
             warn "couldn't run $file"       unless $return;
         }
    }

=item dump LABEL

=item dump

This function causes an immediate core dump.  See also the B<-u>
command-line switch in L<perlrun>, which does the same thing.
Primarily this is so that you can use the B<undump> program (not
supplied) to turn your core dump into an executable binary after
having initialized all your variables at the beginning of the
program.  When the new binary is executed it will begin by executing
a C<goto LABEL> (with all the restrictions that C<goto> suffers).
Think of it as a goto with an intervening core dump and reincarnation.
If C<LABEL> is omitted, restarts the program from the top.

B<WARNING>: Any files opened at the time of the dump will I<not>
be open any more when the program is reincarnated, with possible
resulting confusion on the part of Perl.

This function is now largely obsolete, partly because it's very
hard to convert a core file into an executable, and because the
real compiler backends for generating portable bytecode and compilable
C code have superseded it.  That's why you should now invoke it as
C<CORE::dump()>, if you don't want to be warned against a possible
typo.

If you're looking to use L<dump> to speed up your program, consider
generating bytecode or native C code as described in L<perlcc>.  If
you're just trying to accelerate a CGI script, consider using the
C<mod_perl> extension to B<Apache>, or the CPAN module, CGI::Fast.
You might also consider autoloading or selfloading, which at least
make your program I<appear> to run faster.

=item each HASH

When called in list context, returns a 2-element list consisting of the
key and value for the next element of a hash, so that you can iterate over
it.  When called in scalar context, returns only the key for the next
element in the hash.

Entries are returned in an apparently random order.  The actual random
order is subject to change in future versions of perl, but it is
guaranteed to be in the same order as either the C<keys> or C<values>
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).

When the hash is entirely read, a null array is returned in list context
(which when assigned produces a false (C<0>) value), and C<undef> in
scalar context.  The next call to C<each> after that will start iterating
again.  There is a single iterator for each hash, shared by all C<each>,
C<keys>, and C<values> function calls in the program; it can be reset by
reading all the elements from the hash, or by evaluating C<keys HASH> or
C<values HASH>.  If you add or delete elements of a hash while you're
iterating over it, you may get entries skipped or duplicated, so
don't.  Exception: It is always safe to delete the item most recently
returned by C<each()>, which means that the following code will work:

        while (($key, $value) = each %hash) {
          print $key, "\n";
          delete $hash{$key};   # This is safe
        }

The following prints out your environment like the printenv(1) program,
only in a different order:

    while (($key,$value) = each %ENV) {
         print "$key=$value\n";
    }

See also C<keys>, C<values> and C<sort>.

=item eof FILEHANDLE

=item eof ()

=item eof

Returns 1 if the next read on FILEHANDLE will return end of file, or if
FILEHANDLE is not open.  FILEHANDLE may be an expression whose value
gives the real filehandle.  (Note that this function actually
reads a character and then C<ungetc>s it, so isn't very useful in an
interactive context.)  Do not read from a terminal file (or call
C<eof(FILEHANDLE)> on it) after end-of-file is reached.  File types such
as terminals may lose the end-of-file condition if you do.

An C<eof> without an argument uses the last file read.  Using C<eof()>
with empty parentheses is very different.  It refers to the pseudo file
formed from the files listed on the command line and accessed via the
C<< <> >> operator.  Since C<< <> >> isn't explicitly opened,
as a normal filehandle is, an C<eof()> before C<< <> >> has been
used will cause C<@ARGV> to be examined to determine if input is
available.   Similarly, an C<eof()> after C<< <> >> has returned
end-of-file will assume you are processing another C<@ARGV> list,
and if you haven't set C<@ARGV>, will read input from C<STDIN>;
see L<perlop/"I/O Operators">.

In a C<< while (<>) >> loop, C<eof> or C<eof(ARGV)> can be used to
detect the end of each file, C<eof()> will only detect the end of the
last file.  Examples:

    # reset line numbering on each input file
    while (<>) {
         next if /^\s*#/;         # skip comments
         print "$.\t$_";
    } continue {
         close ARGV  if eof;         # Not eof()!
    }

    # insert dashes just before last line of last file
    while (<>) {
         if (eof()) {                  # check for end of last file
             print "--------------\n";
         }
         print;
         last if eof();          # needed if we're reading from a terminal
    }

Practical hint: you almost never need to use C<eof> in Perl, because the
input operators typically return C<undef> when they run out of data, or if
there was an error.

=item eval EXPR

=item eval BLOCK

In the first form, the return value of EXPR is parsed and executed as if it
were a little Perl program.  The value of the expression (which is itself
determined within scalar context) is first parsed, and if there weren't any
errors, executed in the lexical context of the current Perl program, so
that any variable settings or subroutine and format definitions remain
afterwards.  Note that the value is parsed every time the eval executes.
If EXPR is omitted, evaluates C<$_>.  This form is typically used to
delay parsing and subsequent execution of the text of EXPR until run time.

In the second form, the code within the BLOCK is parsed only once--at the
same time the code surrounding the eval itself was parsed--and executed
within the context of the current Perl program.  This form is typically
used to trap exceptions more efficiently than the first (see below), while
also providing the benefit of checking the code within BLOCK at compile
time.

The final semicolon, if any, may be omitted from the value of EXPR or within
the BLOCK.

In both forms, the value returned is the value of the last expression
evaluated inside the mini-program; a return statement may be also used, just
as with subroutines.  The expression providing the return value is evaluated
in void, scalar, or list context, depending on the context of the eval itself.
See L</wantarray> for more on how the evaluation context can be determined.

If there is a syntax error or runtime error, or a C<die> statement is
executed, an undefined value is returned by C<eval>, and C<$@> is set to the
error message.  If there was no error, C<$@> is guaranteed to be a null
string.  Beware that using C<eval> neither silences perl from printing
warnings to STDERR, nor does it stuff the text of warning messages into C<$@>.
To do either of those, you have to use the C<$SIG{__WARN__}> facility, or
turn off warnings inside the BLOCK or EXPR using S<C<no warnings 'all'>>.
See L</warn>, L<perlvar>, L<warnings> and L<perllexwarn>.

Note that, because C<eval> traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as C<socket> or C<symlink>)
is implemented.  It is also Perl's exception trapping mechanism, where
the die operator is used to raise exceptions.

If the code to be executed doesn't vary, you may use the eval-BLOCK
form to trap run-time errors without incurring the penalty of
recompiling each time.  The error, if any, is still returned in C<$@>.
Examples:

    # make divide-by-zero nonfatal
    eval { $answer = $a / $b; }; warn $@ if $@;

    # same thing, but less efficient
    eval '$answer = $a / $b'; warn $@ if $@;

    # a compile-time error
    eval { $answer = };                           # WRONG

    # a run-time error
    eval '$answer =';         # sets $@

Due to the current arguably broken state of C<__DIE__> hooks, when using
the C<eval{}> form as an exception trap in libraries, you may wish not
to trigger any C<__DIE__> hooks that user code may have installed.
You can use the C<local $SIG{__DIE__}> construct for this purpose,
as shown in this example:

    # a very private exception trap for divide-by-zero
    eval { local $SIG{'__DIE__'}; $answer = $a / $b; };
    warn $@ if $@;

This is especially significant, given that C<__DIE__> hooks can call
C<die> again, which has the effect of changing their error messages:

    # __DIE__ hooks may modify error messages
    {
       local $SIG{'__DIE__'} =
              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo lives here" };
       print $@ if $@;                # prints "bar lives here"
    }

Because this promotes action at a distance, this counterintuitive behavior
may be fixed in a future release.

With an C<eval>, you should be especially careful to remember what's
being looked at when:

    eval $x;                  # CASE 1
    eval "$x";                  # CASE 2

    eval '$x';                  # CASE 3
    eval { $x };         # CASE 4

    eval "\$$x++";         # CASE 5
    $$x++;                  # CASE 6

Cases 1 and 2 above behave identically: they run the code contained in
the variable $x.  (Although case 2 has misleading double quotes making
the reader wonder what else might be happening (nothing is).)  Cases 3
and 4 likewise behave in the same way: they run the code C<'$x'>, which
does nothing but return the value of $x.  (Case 4 is preferred for
purely visual reasons, but it also has the advantage of compiling at
compile-time instead of at run-time.)  Case 5 is a place where
normally you I<would> like to use double quotes, except that in this
particular situation, you can just use symbolic references instead, as
in case 6.

C<eval BLOCK> does I<not> count as a loop, so the loop control statements
C<next>, C<last>, or C<redo> cannot be used to leave or restart the block.

Note that as a very special case, an C<eval ''> executed within the C<DB>
package doesn't see the usual surrounding lexical scope, but rather the
scope of the first non-DB piece of code that called it. You don't normally
need to worry about this unless you are writing a Perl debugger.

=item exec LIST

=item exec PROGRAM LIST

The C<exec> function executes a system command I<and never returns>--
use C<system> instead of C<exec> if you want it to return.  It fails and
returns false only if the command does not exist I<and> it is executed
directly instead of via your system's command shell (see below).

Since it's a common mistake to use C<exec> instead of C<system>, Perl
warns you if there is a following statement which isn't C<die>, C<warn>,
or C<exit> (if C<-w> is set  -  but you always do that).   If you
I<really> want to follow an C<exec> with some other statement, you
can use one of these styles to avoid the warning:

    exec ('foo')   or print STDERR "couldn't exec foo: $!";
    { exec ('foo') }; print STDERR "couldn't exec foo: $!";

If there is more than one argument in LIST, or if LIST is an array
with more than one value, calls execvp(3) with the arguments in LIST.
If there is only one scalar argument or an array with one element in it,
the argument is checked for shell metacharacters, and if there are any,
the entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other platforms).
If there are no shell metacharacters in the argument, it is split into
words and passed directly to C<execvp>, which is more efficient.
Examples:

    exec '/bin/echo', 'Your arguments are: ', @ARGV;
    exec "sort $outfile | uniq";

If you don't really want to execute the first argument, but want to lie
to the program you are executing about its own name, you can specify
the program you actually want to run as an "indirect object" (without a
comma) in front of the LIST.  (This always forces interpretation of the
LIST as a multivalued list, even if there is only a single scalar in
the list.)  Example:

    $shell = '/bin/csh';
    exec $shell '-sh';                  # pretend it's a login shell

or, more directly,

    exec {'/bin/csh'} '-sh';         # pretend it's a login shell

When the arguments get executed via the system shell, results will
be subject to its quirks and capabilities.  See L<perlop/"`STRING`">
for details.

Using an indirect object with C<exec> or C<system> is also more
secure.  This usage (which also works fine with system()) forces
interpretation of the arguments as a multivalued list, even if the
list had just one argument.  That way you're safe from the shell
expanding wildcards or splitting up words with whitespace in them.

    @args = ( "echo surprise" );

    exec @args;               # subject to shell escapes
                                # if @args == 1
    exec { $args[0] } @args;  # safe even with one-arg list

The first version, the one without the indirect object, ran the I<echo>
program, passing it C<"surprise"> an argument.  The second version
didn't--it tried to run a program literally called I<"echo surprise">,
didn't find it, and set C<$?> to a non-zero value indicating failure.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before the exec, but this may not be supported on some platforms
(see L<perlport>).  To be safe, you may need to set C<$|> ($AUTOFLUSH
in English) or call the C<autoflush()> method of C<IO::Handle> on any
open handles in order to avoid lost output.

Note that C<exec> will not call your C<END> blocks, nor will it call
any C<DESTROY> methods in your objects.

=item exists EXPR

Given an expression that specifies a hash element or array element,
returns true if the specified element in the hash or array has ever
been initialized, even if the corresponding value is undefined.  The
element is not autovivified if it doesn't exist.

    print "Exists\n"          if exists $hash{$key};
    print "Defined\n"          if defined $hash{$key};
    print "True\n"      if $hash{$key};

    print "Exists\n"          if exists $array[$index];
    print "Defined\n"          if defined $array[$index];
    print "True\n"      if $array[$index];

A hash or array element can be true only if it's defined, and defined if
it exists, but the reverse doesn't necessarily hold true.

Given an expression that specifies the name of a subroutine,
returns true if the specified subroutine has ever been declared, even
if it is undefined.  Mentioning a subroutine name for exists or defined
does not count as declaring it.  Note that a subroutine which does not
exist may still be callable: its package may have an C<AUTOLOAD>
method that makes it spring into existence the first time that it is
called -- see L<perlsub>.

    print "Exists\n"          if exists &subroutine;
    print "Defined\n"          if defined &subroutine;

Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash or array key lookup or subroutine name:

    if (exists $ref->{A}->{B}->{$key})          { }
    if (exists $hash{A}{B}{$key})          { }

    if (exists $ref->{A}->{B}->[$ix])          { }
    if (exists $hash{A}{B}[$ix])          { }

    if (exists &{$ref->{A}{B}{$key}})   { }

Although the deepest nested array or hash will not spring into existence
just because its existence was tested, any intervening ones will.
Thus C<< $ref->{"A"} >> and C<< $ref->{"A"}->{"B"} >> will spring
into existence due to the existence test for the $key element above.
This happens anywhere the arrow operator is used, including even:

    undef $ref;
    if (exists $ref->{"Some key"})         { }
    print $ref;              # prints HASH(0x80d3d5c)

This surprising autovivification in what does not at first--or even
second--glance appear to be an lvalue context may be fixed in a future
release.

See L<perlref/"Pseudo-hashes: Using an array as a hash"> for specifics
on how exists() acts when used on a pseudo-hash.

Use of a subroutine call, rather than a subroutine name, as an argument
to exists() is an error.

    exists &sub;         # OK
    exists &sub();         # Error

=item exit EXPR

Evaluates EXPR and exits immediately with that value.    Example:

    $ans = <STDIN>;
    exit 0 if $ans =~ /^[Xx]/;

See also C<die>.  If EXPR is omitted, exits with C<0> status.  The only
universally recognized values for EXPR are C<0> for success and C<1>
for error; other values are subject to interpretation depending on the
environment in which the Perl program is running.  For example, exiting
69 (EX_UNAVAILABLE) from a I<sendmail> incoming-mail filter will cause
the mailer to return the item undelivered, but that's not true everywhere.

Don't use C<exit> to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use C<die> instead,
which can be trapped by an C<eval>.

The exit() function does not always exit immediately.  It calls any
defined C<END> routines first, but these C<END> routines may not
themselves abort the exit.  Likewise any object destructors that need to
be called are called before the real exit.  If this is a problem, you
can call C<POSIX:_exit($status)> to avoid END and destructor processing.
See L<perlmod> for details.

=item exp EXPR

=item exp

Retorna I<e> (o logaritmo natural) elevado a potência EXPR.
Se EXPR for omitido, retorna C<exp($_)>.

=item fcntl FILEHANDLE,FUNCTION,SCALAR

Implements the fcntl(2) function.  You'll probably have to say

    use Fcntl;

first to get the correct constant definitions.  Argument processing and
value return works just like C<ioctl> below.
For example:

    use Fcntl;
    fcntl($filehandle, F_GETFL, $packed_return_buffer)
         or die "can't fcntl F_GETFL: $!";

You don't have to check for C<defined> on the return from C<fcntl>.
Like C<ioctl>, it maps a C<0> return from the system call into
C<"0 but true"> in Perl.  This string is true in boolean context and C<0>
in numeric context.  It is also exempt from the normal B<-w> warnings
on improper numeric conversions.

Note that C<fcntl> will produce a fatal error if used on a machine that
doesn't implement fcntl(2).  See the Fcntl module or your fcntl(2)
manpage to learn what functions are available on your system.

Here's an example of setting a filehandle named C<REMOTE> to be
non-blocking at the system level.  You'll have to negotiate C<$|>
on your own, though.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "Can't get flags for the socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "Can't set flags for the socket: $!\n";

=item fileno FILEHANDLE

Returns the file descriptor for a filehandle, or undefined if the
filehandle is not open.  This is mainly useful for constructing
bitmaps for C<select> and low-level POSIX tty-handling operations.
If FILEHANDLE is an expression, the value is taken as an indirect
filehandle, generally its name.

You can use this to find out whether two handles refer to the
same underlying descriptor:

    if (fileno(THIS) == fileno(THAT)) {
         print "THIS and THAT are dups\n";
    }

(Filehandles connected to memory objects via new features of C<open> may
return undefined even though they are open.)


=item flock FILEHANDLE,OPERATION

Calls flock(2), or an emulation of it, on FILEHANDLE.  Returns true
for success, false on failure.  Produces a fatal error if used on a
machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3).
C<flock> is Perl's portable file locking interface, although it locks
only entire files, not records.

Two potentially non-obvious but traditional C<flock> semantics are
that it waits indefinitely until the lock is granted, and that its locks
B<merely advisory>.  Such discretionary locks are more flexible, but offer
fewer guarantees.  This means that files locked with C<flock> may be
modified by programs that do not also use C<flock>.  See L<perlport>,
your port's specific documentation, or your system-specific local manpages
for details.  It's best to assume traditional behavior if you're writing
portable programs.  (But if you're not, you should as always feel perfectly
free to write for your own system's idiosyncrasies (sometimes called
"features").  Slavish adherence to portability concerns shouldn't get
in the way of your getting your job done.)

OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined with
LOCK_NB.  These constants are traditionally valued 1, 2, 8 and 4, but
you can use the symbolic names if you import them from the Fcntl module,
either individually, or as a group using the ':flock' tag.  LOCK_SH
requests a shared lock, LOCK_EX requests an exclusive lock, and LOCK_UN
releases a previously requested lock.  If LOCK_NB is bitwise-or'ed with
LOCK_SH or LOCK_EX then C<flock> will return immediately rather than blocking
waiting for the lock (check the return status to see if you got it).

To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE
before locking or unlocking it.

Note that the emulation built with lockf(3) doesn't provide shared
locks, and it requires that FILEHANDLE be open with write intent.  These
are the semantics that lockf(3) implements.  Most if not all systems
implement lockf(3) in terms of fcntl(2) locking, though, so the
differing semantics shouldn't bite too many people.

Note that the fcntl(2) emulation of flock(3) requires that FILEHANDLE
be open with read intent to use LOCK_SH and requires that it be open
with write intent to use LOCK_EX.

Note also that some versions of C<flock> cannot lock things over the
network; you would need to use the more system-specific C<fcntl> for
that.  If you like you can force Perl to ignore your system's flock(2)
function, and so provide its own fcntl(2)-based emulation, by passing
the switch C<-Ud_flock> to the F<Configure> program when you configure
perl.

Here's a mailbox appender for BSD systems.

    use Fcntl ':flock'; # import LOCK_* constants

    sub lock {
         flock(MBOX,LOCK_EX);
         # and, in case someone appended
         # while we were waiting...
         seek(MBOX, 0, 2);
    }

    sub unlock {
         flock(MBOX,LOCK_UN);
    }

    open(MBOX, ">>/usr/spool/mail/$ENV{'USER'}")
             or die "Can't open mailbox: $!";

    lock();
    print MBOX $msg,"\n\n";
    unlock();

On systems that support a real flock(), locks are inherited across fork()
calls, whereas those that must resort to the more capricious fcntl()
function lose the locks, making it harder to write servers.

See also L<DB_File> for other flock() examples.

=item fork

Does a fork(2) system call to create a new process running the
same program at the same point.  It returns the child pid to the
parent process, C<0> to the child process, or C<undef> if the fork is
unsuccessful.  File descriptors (and sometimes locks on those descriptors)
are shared, while everything else is copied.  On most systems supporting
fork(), great care has gone into making it extremely efficient (for
example, using copy-on-write technology on data pages), making it the
dominant paradigm for multitasking over the last few decades.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before forking the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles in order to avoid duplicate output.

If you C<fork> without ever waiting on your children, you will
accumulate zombies.  On some systems, you can avoid this by setting
C<$SIG{CHLD}> to C<"IGNORE">.  See also L<perlipc> for more examples of
forking and reaping moribund children.

Note that if your forked child inherits system file descriptors like
STDIN and STDOUT that are actually connected by a pipe or socket, even
if you exit, then the remote server (such as, say, a CGI script or a
backgrounded job launched from a remote shell) won't think you're done.
You should reopen those to F</dev/null> if it's any issue.

=item format

Declare a picture format for use by the C<write> function.  For
example:

    format Something =
         Test: @<<<<<<<< @||||| @>>>>>
               $str,     $%,    '$' . int($num)
    .

    $str = "widget";
    $num = $cost/$quantity;
    $~ = 'Something';
    write;

See L<perlform> for many details and examples.

=item formline PICTURE,LIST

This is an internal function used by C<format>s, though you may call it,
too.  It formats (see L<perlform>) a list of values according to the
contents of PICTURE, placing the output into the format output
accumulator, C<$^A> (or C<$ACCUMULATOR> in English).
Eventually, when a C<write> is done, the contents of
C<$^A> are written to some filehandle, but you could also read C<$^A>
yourself and then set C<$^A> back to C<"">.  Note that a format typically
does one C<formline> per line of form, but the C<formline> function itself
doesn't care how many newlines are embedded in the PICTURE.  This means
that the C<~> and C<~~> tokens will treat the entire PICTURE as a single line.
You may therefore need to use multiple formlines to implement a single
record format, just like the format compiler.

Be careful if you put double quotes around the picture, because an C<@>
character may be taken to mean the beginning of an array name.
C<formline> always returns true.  See L<perlform> for other examples.

=item getc FILEHANDLE

=item getc

Returns the next character from the input file attached to FILEHANDLE,
or the undefined value at end of file, or if there was an error (in
the latter case C<$!> is set).  If FILEHANDLE is omitted, reads from
STDIN.  This is not particularly efficient.  However, it cannot be
used by itself to fetch single characters without waiting for the user
to hit enter.  For that, try something more like:

    if ($BSD_STYLE) {
         system "stty cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
         system "stty", '-icanon', 'eol', "\001";
    }

    $key = getc(STDIN);

    if ($BSD_STYLE) {
         system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
         system "stty", 'icanon', 'eol', '^@'; # ASCII null
    }
    print "\n";

Determination of whether $BSD_STYLE should be set
is left as an exercise to the reader.

The C<POSIX::getattr> function can do this more portably on
systems purporting POSIX compliance.  See also the C<Term::ReadKey>
module from your nearest CPAN site; details on CPAN can be found on
L<perlmodlib/CPAN>.

=item getlogin

Implements the C library function of the same name, which on most
systems returns the current login from F</etc/utmp>, if any.  If null,
use C<getpwuid>.

    $login = getlogin || getpwuid($<) || "Kilroy";

Do not consider C<getlogin> for authentication: it is not as
secure as C<getpwuid>.

=item getpeername SOCKET

Returns the packed sockaddr address of other end of the SOCKET connection.

    use Socket;
    $hersockaddr    = getpeername(SOCK);
    ($port, $iaddr) = sockaddr_in($hersockaddr);
    $herhostname    = gethostbyaddr($iaddr, AF_INET);
    $herstraddr     = inet_ntoa($iaddr);

=item getpgrp PID

Returns the current process group for the specified PID.  Use
a PID of C<0> to get the current process group for the
current process.  Will raise an exception if used on a machine that
doesn't implement getpgrp(2).  If PID is omitted, returns process
group of current process.  Note that the POSIX version of C<getpgrp>
does not accept a PID argument, so only C<PID==0> is truly portable.

=item getppid

Retorna o process id do processo pai.

Note for Linux users: on Linux, the C functions C<getpid()> and
C<getppid()> return different values from different threads. In order to
be portable, this behavior is not reflected by the perl-level function
C<getppid()>, that returns a consistent value across threads. If you want
to call the underlying C<getppid()>, you may use the CPAN module
C<Linux::Pid>.

=item getpriority WHICH,WHO

Returns the current priority for a process, a process group, or a user.
(See L<getpriority(2)>.)  Will raise a fatal exception if used on a
machine that doesn't implement getpriority(2).

=item getpwnam NAME

=item getgrnam NAME

=item gethostbyname NAME

=item getnetbyname NAME

=item getprotobyname NAME

=item getpwuid UID

=item getgrgid GID

=item getservbyname NAME,PROTO

=item gethostbyaddr ADDR,ADDRTYPE

=item getnetbyaddr ADDR,ADDRTYPE

=item getprotobynumber NUMBER

=item getservbyport PORT,PROTO

=item getpwent

=item getgrent

=item gethostent

=item getnetent

=item getprotoent

=item getservent

=item setpwent

=item setgrent

=item sethostent STAYOPEN

=item setnetent STAYOPEN

=item setprotoent STAYOPEN

=item setservent STAYOPEN

=item endpwent

=item endgrent

=item endhostent

=item endnetent

=item endprotoent

=item endservent

These routines perform the same functions as their counterparts in the
system library.  In list context, the return values from the
various get routines are as follows:

    ($name,$passwd,$uid,$gid,
       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
    ($name,$passwd,$gid,$members) = getgr*
    ($name,$aliases,$addrtype,$length,@addrs) = gethost*
    ($name,$aliases,$addrtype,$net) = getnet*
    ($name,$aliases,$proto) = getproto*
    ($name,$aliases,$port,$proto) = getserv*

(If the entry doesn't exist you get a null list.)

The exact meaning of the $gcos field varies but it usually contains
the real name of the user (as opposed to the login name) and other
information pertaining to the user.  Beware, however, that in many
system users are able to change this information and therefore it
cannot be trusted and therefore the $gcos is tainted (see
L<perlsec>).  The $passwd and $shell, user's encrypted password and
login shell, are also tainted, because of the same reason.

In scalar context, you get the name, unless the function was a
lookup by name, in which case you get the other thing, whatever it is.
(If the entry doesn't exist you get the undefined value.)  For example:

    $uid   = getpwnam($name);
    $name  = getpwuid($num);
    $name  = getpwent();
    $gid   = getgrnam($name);
    $name  = getgrgid($num);
    $name  = getgrent();
    #etc.

In I<getpw*()> the fields $quota, $comment, and $expire are special
cases in the sense that in many systems they are unsupported.  If the
$quota is unsupported, it is an empty scalar.  If it is supported, it
usually encodes the disk quota.  If the $comment field is unsupported,
it is an empty scalar.  If it is supported it usually encodes some
administrative comment about the user.  In some systems the $quota
field may be $change or $age, fields that have to do with password
aging.  In some systems the $comment field may be $class.  The $expire
field, if present, encodes the expiration period of the account or the
password.  For the availability and the exact meaning of these fields
in your system, please consult your getpwnam(3) documentation and your
F<pwd.h> file.  You can also find out from within Perl what your
$quota and $comment fields mean and whether you have the $expire field
by using the C<Config> module and the values C<d_pwquota>, C<d_pwage>,
C<d_pwchange>, C<d_pwcomment>, and C<d_pwexpire>.  Shadow password
files are only supported if your vendor has implemented them in the
intuitive fashion that calling the regular C library routines gets the
shadow versions if you're running under privilege or if there exists
the shadow(3) functions as found in System V ( this includes Solaris
and Linux.)  Those systems which implement a proprietary shadow password
facility are unlikely to be supported.

The $members value returned by I<getgr*()> is a space separated list of
the login names of the members of the group.

For the I<gethost*()> functions, if the C<h_errno> variable is supported in
C, it will be returned to you via C<$?> if the function call fails.  The
C<@addrs> value returned by a successful call is a list of the raw
addresses returned by the corresponding system library call.  In the
Internet domain, each address is four bytes long and you can unpack it
by saying something like:

    ($a,$b,$c,$d) = unpack('C4',$addr[0]);

The Socket library makes this slightly easier:

    use Socket;
    $iaddr = inet_aton("127.1"); # or whatever address
    $name  = gethostbyaddr($iaddr, AF_INET);

    # or going the other way
    $straddr = inet_ntoa($iaddr);

If you get tired of remembering which element of the return list
contains which return value, by-name interfaces are provided
in standard modules: C<File::stat>, C<Net::hostent>, C<Net::netent>,
C<Net::protoent>, C<Net::servent>, C<Time::gmtime>, C<Time::localtime>,
and C<User::grent>.  These override the normal built-ins, supplying
versions that return objects with the appropriate names
for each field.  For example:

   use File::stat;
   use User::pwent;
   $is_his = (stat($filename)->uid == pwent($whoever)->uid);

Even though it looks like they're the same method calls (uid),
they aren't, because a C<File::stat> object is different from
a C<User::pwent> object.

=item getsockname SOCKET

Returns the packed sockaddr address of this end of the SOCKET connection,
in case you don't know the address because you have several different
IPs that the connection might have come in on.

    use Socket;
    $mysockaddr = getsockname(SOCK);
    ($port, $myaddr) = sockaddr_in($mysockaddr);
    printf "Connect to %s [%s]\n",
       scalar gethostbyaddr($myaddr, AF_INET),
       inet_ntoa($myaddr);

=item getsockopt SOCKET,LEVEL,OPTNAME

Queries the option named OPTNAME associated with SOCKET at a given LEVEL.
Options may exist at multiple protocol levels depending on the socket
type, but at least the uppermost socket level SOL_SOCKET (defined in the
C<Socket> module) will exist. To query options at another level the
protocol number of the appropriate protocol controlling the option
should be supplied. For example, to indicate that an option is to be
interpreted by the TCP protocol, LEVEL should be set to the protocol
number of TCP, which you can get using getprotobyname.

The call returns a packed string representing the requested socket option,
or C<undef> if there is an error (the error reason will be in $!). What
exactly is in the packed string depends in the LEVEL and OPTNAME, consult
your system documentation for details. A very common case however is that
the option is an integer, in which case the result will be an packed
integer which you can decode using unpack with the C<i> (or C<I>) format.

An example testing if Nagle's algorithm is turned on on a socket:

    use Socket qw(:all);

    defined(my $tcp = getprotobyname("tcp"))
         or die "Could not determine the protocol number for tcp";
    # my $tcp = IPPROTO_TCP; # Alternative
    my $packed = getsockopt($socket, $tcp, TCP_NODELAY)
         or die "Could not query TCP_NODELAY socket option: $!";
    my $nodelay = unpack("I", $packed);
    print "Nagle's algorithm is turned ", $nodelay ? "off\n" : "on\n";


=item glob EXPR

=item glob

In list context, returns a (possibly empty) list of filename expansions on
the value of EXPR such as the standard Unix shell F</bin/csh> would do. In
scalar context, glob iterates through such filename expansions, returning
undef when the list is exhausted. This is the internal function
implementing the C<< <*.c> >> operator, but you can use it directly. If
EXPR is omitted, C<$_> is used.  The C<< <*.c> >> operator is discussed in
more detail in L<perlop/"I/O Operators">.

Beginning with v5.6.0, this operator is implemented using the standard
C<File::Glob> extension.  See L<File::Glob> for details.

=item gmtime EXPR

Converts a time as returned by the time function to an 8-element list
with the time localized for the standard Greenwich time zone.
Typically used as follows:

    #  0    1    2     3     4    5     6     7
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) =
                                                 gmtime(time);

All list elements are numeric, and come straight out of the C `struct
tm'.  $sec, $min, and $hour are the seconds, minutes, and hours of the
specified time.  $mday is the day of the month, and $mon is the month
itself, in the range C<0..11> with 0 indicating January and 11
indicating December.  $year is the number of years since 1900.  That
is, $year is C<123> in year 2023.  $wday is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  $yday is the day of
the year, in the range C<0..364> (or C<0..365> in leap years.)

Note that the $year element is I<not> simply the last two digits of
the year.  If you assume it is, then you create non-Y2K-compliant
programs--and you wouldn't want to do that, would you?

The proper way to get a complete 4-digit year is simply:

         $year += 1900;

And to get the last two digits of the year (e.g., '01' in 2001) do:

         $year = sprintf("%02d", $year % 100);

If EXPR is omitted, C<gmtime()> uses the current time (C<gmtime(time)>).

In scalar context, C<gmtime()> returns the ctime(3) value:

    $now_string = gmtime;  # e.g., "Thu Oct 13 04:54:34 1994"

If you need local time instead of GMT use the L</localtime> builtin.
See also the C<timegm> function provided by the C<Time::Local> module,
and the strftime(3) and mktime(3) functions available via the L<POSIX> module.

This scalar value is B<not> locale dependent (see L<perllocale>), but is
instead a Perl builtin.  To get somewhat similar but locale dependent date
strings, see the example in L</localtime>.

See L<perlport/gmtime> for portability concerns.

=item goto LABEL

=item goto EXPR

=item goto &NAME

The C<goto-LABEL> form finds the statement labeled with LABEL and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a C<foreach> loop.  It
also can't be used to go into a construct that is optimized away,
or to get out of a block or subroutine given to C<sort>.
It can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as C<last> or C<die>.  The author of Perl has never felt the
need to use this form of C<goto> (in Perl, that is--C is another matter).
(The difference being that C does not offer named loops combined with
loop control.  Perl does, and this replaces most structured uses of C<goto>
in other languages.)

The C<goto-EXPR> form expects a label name, whose scope will be resolved
dynamically.  This allows for computed C<goto>s per FORTRAN, but isn't
necessarily recommended if you're optimizing for maintainability:

    goto ("FOO", "BAR", "GLARCH")[$i];

The C<goto-&NAME> form is quite different from the other forms of
C<goto>.  In fact, it isn't a goto in the normal sense at all, and
doesn't have the stigma associated with other gotos.  Instead, it
exits the current subroutine (losing any changes set by local()) and
immediately calls in its place the named subroutine using the current
value of @_.  This is used by C<AUTOLOAD> subroutines that wish to
load another subroutine and then pretend that the other subroutine had
been called in the first place (except that any modifications to C<@_>
in the current subroutine are propagated to the other subroutine.)
After the C<goto>, not even C<caller> will be able to tell that this
routine was called first.

NAME needn't be the name of a subroutine; it can be a scalar variable
containing a code reference, or a block which evaluates to a code
reference.

=item grep BLOCO LISTA

=item grep EXPR,LISTA

Similar em espírito, mas não as mesma coisa que, grep(1) e seus parentes.
Em particular, ele não é limitado ao uso de expressões regulares.

Avalia o BLOCO ou EXPR para cada elemento da LISTA (localmente referido por
C<$_> para cada elemento) e retorna a valor da lista consistido daqueles
elementos para os quais a expressão avaliou em verdadeiro. Em contexto
escalar, retorna o número de vezes que a expressão resultou em verdadeiro.

    @foo = grep(!/^#/, @bar);    # elimina comentários

ou equivalente,

    @foo = grep {!/^#/} @bar;    # elimina comentários

Note que C<$_> é um apelido para o valor da lista, de modo que pode ser usado
para modificar os elementos da LISTA. Embora seja útil e apoiado, isto causa
resultados bizarros se os elementos da LISTA não são variáveis. Similarmente,
grep retorna apelidos dentro da lista original, muito mais como um índice
variável apelidando os elementos da lista em um looping for. Tanto  é que,
modificando um elemento da lista retornado pelo grep (for exemplo, em um
C<foreach>, C<map> ou outro C<grep>) realmente modifica o elemento na lista
original. Isto geralmente é evitado quando se escrever código limpo.

Veja também L</map> para uma lista composta dos resultados de BLOCO ou EXPR.

=item hex EXPR

=item hex

Interpreta EXPR como uma string hex e retorna o valor correspondente. (Para 
converter strings que podem começar com C<0>, C<0x>, ou C<0b>, veja L</oct>.) 
Se Expr for omitido, usa C<$_>.

    print hex '0xAf'; # imprime '175'
    print hex 'aF';   # idem

Strings hex podem somente representar inteiros. Strings que possam causar 
estouro de inteiros disparam uma advertência. Espaços em branco em volta não 
são removidos, diferente de oct(). Para apresentar algo como hex, olhe em 
L</printf>, L</sprintf>, ou L</unpack>.

=item import

There is no builtin C<import> function.  It is just an ordinary
method (subroutine) defined (or inherited) by modules that wish to export
names to another module.  The C<use> function calls the C<import> method
for the package used.  See also L</use>, L<perlmod>, and L<Exporter>.

=item index STR,SUBSTR,POSIÇÃO

=item index STR,SUBSTR

A função index procura por uma string dentro de outra, mas sem o comportamento 
parcido de caractere curinga de um completo padrão de combinação de expressão 
regular. Retorna a posição da primeira ocorrência de SUBSTR em STR ou após 
POSIÇÃO. Se POSIÇÃO for omitido, começa a procurando do início da string. O 
valor de retorno é baseado no C<0> (ou o que quer que você defina na variável 
C<$[> -- mas não faça isso). Se a sub string não for encontrada, retorna um 
subtraído da base, geralmente C<-1>.

=item int EXPR

=item int

Returns the integer portion of EXPR.  If EXPR is omitted, uses C<$_>.
You should not use this function for rounding: one because it truncates
towards C<0>, and two because machine representations of floating point
numbers can sometimes produce counterintuitive results.  For example,
C<int(-6.725/0.025)> produces -268 rather than the correct -269; that's
because it's really more like -268.99999999999994315658 instead.  Usually,
the C<sprintf>, C<printf>, or the C<POSIX::floor> and C<POSIX::ceil>
functions will serve you better than will int().

=item ioctl FILEHANDLE,FUNCTION,SCALAR

Implements the ioctl(2) function.  You'll probably first have to say

    require "ioctl.ph";         # probably in /usr/local/lib/perl/ioctl.ph

to get the correct function definitions.  If F<ioctl.ph> doesn't
exist or doesn't have the correct definitions you'll have to roll your
own, based on your C header files such as F<< <sys/ioctl.h> >>.
(There is a Perl script called B<h2ph> that comes with the Perl kit that
may help you in this, but it's nontrivial.)  SCALAR will be read and/or
written depending on the FUNCTION--a pointer to the string value of SCALAR
will be passed as the third argument of the actual C<ioctl> call.  (If SCALAR
has no string value but does have a numeric value, that value will be
passed rather than a pointer to the string value.  To guarantee this to be
true, add a C<0> to the scalar before using it.)  The C<pack> and C<unpack>
functions may be needed to manipulate the values of structures used by
C<ioctl>.

The return value of C<ioctl> (and C<fcntl>) is as follows:

         if OS returns:                  then Perl returns:
             -1                               undefined value
              0                            string "0 but true"
         anything else                      that number

Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:

    $retval = ioctl(...) || -1;
    printf "System returned %d\n", $retval;

The special string C<"0 but true"> is exempt from B<-w> complaints
about improper numeric conversions.

=item join EXPR,LIST

Joins the separate strings of LIST into a single string with fields
separated by the value of EXPR, and returns that new string.  Example:

    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);

Beware that unlike C<split>, C<join> doesn't take a pattern as its
first argument.  Compare L</split>.

=item keys HASH

Returns a list consisting of all the keys of the named hash.
(In scalar context, returns the number of keys.)

The keys are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the C<values> or C<each>
function produces (given that the hash has not been modified).  Since
Perl 5.8.1 the ordering is different even between different runs of
Perl for security reasons (see L<perlsec/"Algorithmic Complexity
Attacks">).

As a side effect, calling keys() resets the HASH's internal iterator,
see L</each>. (In particular, calling keys() in void context resets
the iterator with no other overhead.)

Here is yet another way to print your environment:

    @keys = keys %ENV;
    @values = values %ENV;
    while (@keys) {
         print pop(@keys), '=', pop(@values), "\n";
    }

or how about sorted by key:

    foreach $key (sort(keys %ENV)) {
         print $key, '=', $ENV{$key}, "\n";
    }

The returned values are copies of the original keys in the hash, so
modifying them will not affect the original hash.  Compare L</values>.

To sort a hash by value, you'll need to use a C<sort> function.
Here's a descending numeric sort of a hash by its values:

    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
         printf "%4d %s\n", $hash{$key}, $key;
    }

As an lvalue C<keys> allows you to increase the number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say

    keys %hash = 200;

then C<%hash> will have at least 200 buckets allocated for it--256 of them,
in fact, since it rounds up to the next power of two.  These
buckets will be retained even if you do C<%hash = ()>, use C<undef
%hash> if you want to free the storage while C<%hash> is still in scope.
You can't shrink the number of buckets allocated for the hash using
C<keys> in this way (but you needn't worry about doing this by accident,
as trying has no effect).

See also C<each>, C<values> and C<sort>.

=item kill SIGNAL, LIST

Sends a signal to a list of processes.  Returns the number of
processes successfully signaled (which is not necessarily the
same as the number actually killed).

    $cnt = kill 1, $child1, $child2;
    kill 9, @goners;

If SIGNAL is zero, no signal is sent to the process.  This is a
useful way to check that a child process is alive and hasn't changed
its UID.  See L<perlport> for notes on the portability of this
construct.

Unlike in the shell, if SIGNAL is negative, it kills
process groups instead of processes.  (On System V, a negative I<PROCESS>
number will also kill process groups, but that's not portable.)  That
means you usually want to use positive not negative signals.  You may also
use a signal name in quotes.

See L<perlipc/"Signals"> for more details.

=item last LABEL

=item last

The C<last> command is like the C<break> statement in C (as used in
loops); it immediately exits the loop in question.  If the LABEL is
omitted, the command refers to the innermost enclosing loop.  The
C<continue> block, if any, is not executed:

    LINE: while (<STDIN>) {
         last LINE if /^$/;         # exit when done with header
         #...
    }

C<last> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<last> can be used to effect an early
exit out of such a block.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

=item lc EXPR

=item lc

Retorna o versão minúscula de EXPR. Esta é a função interna que implementa o 
escape C<\L> em strings entre aspas. Respeita o corrente locale LC_CTYPE se 
C<use locale> obrigar. Veja L<perllocale> and L<perlunicode> para mais detalhes 
sobre locale e suporte Unicode.

Se EXPR for omitido, usa C<$_>.

=item lcfirst EXPR

=item lcfirst

Retorna o valor de EXPR com o primeiro caracter em minúsculo. Esta é a função 
interna que implementa o escape C<\I> em strings entre aspas. Respeita o 
corrente locale LC_CTYPE se C<use locale> orbigar. Veja L<perllocale> e 
L<perlunicode> para mais detalhes sobre locale e suporte Unicode.

Se EXPR for omitido, usa C<$_>.

=item length EXPR

=item length

Retorna o comprimento em I<caracteres> do valor de EXPR. Se EXPR for omitido, 
retorna o comprimento de C<$_>. Note que isto não pode ser usado sobre todo um 
array ou hash para determinar quantos elementos eles tem. Para tanto, use 
C<scalar @array> e C<scalar keys %hash> respectivamente.

Nota I<caracteres>: se a EXPR está em Unicode, você irá obter o número de 
caracters, mas não o número de bytes. Para obter o comprimento em bytes, use 
C<do { use bytes; length(EXPR) }>, veja L<bytes>.

=item link VELHOARQUIVO,NOVOARQUIVO

Cria um novo nome de arquivo vinculado ao velho nome de arquivo. Retorna 
verdadeiro para sucesso, falso do contrário.

=item listen SOCKET,QUEUESIZE

Does the same thing that the listen system call does.  Returns true if
it succeeded, false otherwise.  See the example in
L<perlipc/"Sockets: Client/Server Communication">.

=item local EXPR

You really probably want to be using C<my> instead, because C<local> isn't
what most people think of as "local".  See
L<perlsub/"Private Variables via my()"> for details.

A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See L<perlsub/"Temporary Values via local()">
for details, including issues with tied arrays and hashes.

=item localtime EXPR

=item localtime

Converts a time as returned by the time function to a 9-element list
with the time analyzed for the local time zone.  Typically used as
follows:

    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
                                                localtime(time);

All list elements are numeric, and come straight out of the C `struct
tm'.  C<$sec>, C<$min>, and C<$hour> are the seconds, minutes, and hours
of the specified time.

C<$mday> is the day of the month, and C<$mon> is the month itself, in
the range C<0..11> with 0 indicating January and 11 indicating December.
This makes it easy to get a month name from a list:

    my @abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    print "$abbr[$mon] $mday";
    # $mon=9, $mday=18 gives "Oct 18"

C<$year> is the number of years since 1900, not just the last two digits
of the year.  That is, C<$year> is C<123> in year 2023.  The proper way
to get a complete 4-digit year is simply:

    $year += 1900;

To get the last two digits of the year (e.g., '01' in 2001) do:

    $year = sprintf("%02d", $year % 100);

C<$wday> is the day of the week, with 0 indicating Sunday and 3 indicating
Wednesday.  C<$yday> is the day of the year, in the range C<0..364>
(or C<0..365> in leap years.)

C<$isdst> is true if the specified time occurs during Daylight Saving
Time, false otherwise.

If EXPR is omitted, C<localtime()> uses the current time (C<localtime(time)>).

In scalar context, C<localtime()> returns the ctime(3) value:

    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"

This scalar value is B<not> locale dependent but is a Perl builtin. For GMT
instead of local time use the L</gmtime> builtin. See also the
C<Time::Local> module (to convert the second, minutes, hours, ... back to
the integer value returned by time()), and the L<POSIX> module's strftime(3)
and mktime(3) functions.

To get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>) and
try for example:

    use POSIX qw(strftime);
    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
    # or for GMT formatted appropriately for your locale:
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note that the C<%a> and C<%b>, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.

See L<perlport/localtime> for portability concerns.

=item lock THING

This function places an advisory lock on a shared variable, or referenced
object contained in I<THING> until the lock goes out of scope.

lock() is a "weak keyword" : this means that if you've defined a function
by this name (before any calls to it), that function will be called
instead. (However, if you've said C<use threads>, lock() is always a
keyword.) See L<threads>.

=item log EXPR

=item log

Retorna o logaritmo natural (base I<e>) de EXPR. Se EXPR for omitido,
retorna log de C<$_>. Para obter o log de outra base, utilize algebra básica:
O log em uma base N de um número é igual ao log natural deste número dividido pelo
log natural de N. Por exemplo:

    sub log10 {
         my $n = shift;
         return log($n)/log(10);
    }

Veja também L</exp> para a operação inversa.

=item lstat EXPR

=item lstat

Does the same thing as the C<stat> function (including setting the
special C<_> filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal C<stat> is done.  For much more detailed
information, please see the documentation for L</stat>.

If EXPR is omitted, stats C<$_>.

=item m//

The match operator.  See L<perlop>.

=item map BLOCK LIST

=item map EXPR,LIST

Evaluates the BLOCK or EXPR for each element of LIST (locally setting
C<$_> to each element) and returns the list value composed of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates BLOCK or EXPR in
list context, so each element of LIST may produce zero, one, or
more elements in the returned value.

    @chars = map(chr, @nums);

translates a list of numbers to the corresponding characters.  And

    %hash = map { getkey($_) => $_ } @array;

is just a funny way to write

    %hash = ();
    foreach $_ (@array) {
         $hash{getkey($_)} = $_;
    }

Note that C<$_> is an alias to the list value, so it can be used to
modify the elements of the LIST.  While this is useful and supported,
it can cause bizarre results if the elements of LIST are not variables.
Using a regular C<foreach> loop for this purpose would be clearer in
most cases.  See also L</grep> for an array composed of those items of
the original list for which the BLOCK or EXPR evaluates to true.

C<{> starts both hash references and blocks, so C<map { ...> could be either
the start of map BLOCK LIST or map EXPR, LIST. Because perl doesn't look
ahead for the closing C<}> it has to take a guess at which its dealing with
based what it finds just after the C<{>. Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the C<}> and
encounters the missing (or unexpected) comma. The syntax error will be
reported close to the C<}> but you'll need to change something near the C<{>
such as using a unary C<+> to give perl some help:

    %hash = map {  "\L$_", 1  } @array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_", 1  } @array  # perl guesses BLOCK. right
    %hash = map { ("\L$_", 1) } @array  # this also works
    %hash = map {  lc($_), 1  } @array  # as does this.
    %hash = map +( lc($_), 1 ), @array  # this is EXPR and works!

    %hash = map  ( lc($_), 1 ), @array  # evaluates to (1, @array)

or to force an anon hash constructor use C<+{>

   @hashes = map +{ lc($_), 1 }, @array # EXPR, so needs , at end

and you get list of anonymous hashes each with only 1 entry.

=item mkdir FILENAME,MASK

=item mkdir FILENAME

Creates the directory specified by FILENAME, with permissions
specified by MASK (as modified by C<umask>).  If it succeeds it
returns true, otherwise it returns false and sets C<$!> (errno).
If omitted, MASK defaults to 0777.

In general, it is better to create directories with permissive MASK,
and let the user modify that with their C<umask>, than it is to supply
a restrictive MASK and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The perlfunc(1) entry on
C<umask> discusses the choice of MASK in more detail.

Note that according to the POSIX 1003.1-1996 the FILENAME may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.

=item msgctl ID,CMD,ARG

Calls the System V IPC function msgctl(2).  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable which will hold the returned C<msqid_ds>
structure.  Returns like C<ioctl>: the undefined value for error,
C<"0 but true"> for zero, or the actual return value otherwise.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::Semaphore> documentation.

=item msgget KEY,FLAGS

Calls the System V IPC function msgget(2).  Returns the message queue
id, or the undefined value if there is an error.  See also
L<perlipc/"SysV IPC"> and C<IPC::SysV> and C<IPC::Msg> documentation.

=item msgrcv ID,VAR,SIZE,TYPE,FLAGS

Calls the System V IPC function msgrcv to receive a message from
message queue ID into variable VAR with a maximum message size of
SIZE.  Note that when a message is received, the message type as a
native long integer will be the first thing in VAR, followed by the
actual message.  This packing may be opened with C<unpack("l! a*")>.
Taints the variable.  Returns true if successful, or false if there is
an error.  See also L<perlipc/"SysV IPC">, C<IPC::SysV>, and
C<IPC::SysV::Msg> documentation.

=item msgsnd ID,MSG,FLAGS

Calls the System V IPC function msgsnd to send the message MSG to the
message queue ID.  MSG must begin with the native long integer message
type, and be followed by the length of the actual message, and finally
the message itself.  This kind of packing can be achieved with
C<pack("l! a*", $type, $message)>.  Returns true if successful,
or false if there is an error.  See also C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.

=item my EXPR

=item my TYPE EXPR

=item my EXPR : ATTRS

=item my TYPE EXPR : ATTRS

A C<my> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval>.  If more than one value is listed,
the list must be placed in parentheses.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.

=item next LABEL

=item next

The C<next> command is like the C<continue> statement in C; it starts
the next iteration of the loop:

    LINE: while (<STDIN>) {
         next LINE if /^#/;         # discard comments
         #...
    }

Note that if there were a C<continue> block on the above, it would get
executed even on discarded lines.  If the LABEL is omitted, the command
refers to the innermost enclosing loop.

C<next> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<next> will exit such a block early.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

=item no Módulo VERSÃO LISTA

=item no Módulo VERSÃO

=item no Módulo LISTA

=item no Módulo 

Veja a função C<use>, com C<no> é o seu oposto.

=item oct EXPR

=item oct

Interpreta EXPR como uma strint octal e retorna o valor correspondente. (Se 
EXPR iniciar com C<0x>, interpreta-a como uma string hex. Se EXPR iniciar com 
C<0b>, é interpretado como uma string binária. Espaços em branco em volta são 
ignorados em todos os três casos.) O seguinte irá tratar de decimal, binário, 
octal, e hexadecimal no padrão Perl ou notação C:

    $val = oct($val) if $val =~ /^0/;

Se EXPR for omitido, usa C<$_>. Para ir por outro caminho (produzir um número 
em octal), use sprintf() ou printf():

    $perms = (stat("filename"))[2] & 07777;
    $oct_perms = sprintf "%lo", $perms;

A função oct() é frequentemente usada quando uma string como C<644> necessita 
ser convertida em um modo de arquivo, por exemplo. (Embora perl irá 
automaticamente converter strings em números conforme necessário, esta 
conversão automática assume a base 10.)

=item open FILEHANDLE,EXPR

=item open FILEHANDLE,MODE,EXPR

=item open FILEHANDLE,MODE,EXPR,LIST

=item open FILEHANDLE,MODE,REFERENCE

=item open FILEHANDLE

Abre o arquivo cujo nome de arquivo é dado por EXPR, e o associa com FILEHANDLE.

(O séquito é uma referência abrangente de open(): para uma introdução mais
suave, você pode considerar L<perlopentut>.)

Se FILEHANDLE for uma variável escalar indefinida (ou um I<array> ou elemento de
I<hash>) uma referência a um novo I<filehandle> anônimo é designada à variável,
caso contrário se FILEHANDLE é uma expressão, seu valor é usado como o nome do
I<filehandle> real desejado. (Isto é considerado uma referência simbólica, então
C<use strict 'refs'> B<não> deve estar em efeito).

Se EXPR for omitido, a variável escalar do mesmo nome que o FILEHANDLE contém o
nome de arquivo. (Note que variáveis léxicas -- as que são declaradas com
C<my>--não funcionarão para este propósito; então se você estiver utilizando
C<my>, especifique EXPR em na chamada para C<open>).

Se três ou mais argumentos forem especificados então o modo de abertura e o nome
do arquivo são separados. Se MODE for C<< '<' >> ou nada, o arquivo é aberto
para entrada. Se MODE for C<< '>'>>, o arquivo é truncado e aberto para saída,
sendo criado se for necessário. Se MODE for C<<< '>> ‘>>>, o arquivo é aberto
para anexação, novamente sendo criado se for necessário.

Você pode pôr um C<'+'> na frente do C<< '>'>> ou C<< '<' >> para indicar que
deseja tanto acesso de escrita quanto de leitura ao arquivo; assim C<< '+<' >>
quase sempre é preferido para atualizações de leitura/escritas -- o modo C<<
'+>'>> truncaria o arquivo primeiro. Você geralmente não pode usar modo de
leitura-escrita algum para atualizar arquivos texto, já que eles têm registros
de comprimento variável. Veja o I<switch> B<-i> em L<perlrun> para uma abordagem
melhor. O arquivo é criado com permissões de C<0666> modificado pelo valor
C<umask> do processo.

Estes prefixos variados correspondem aos modos C<'r'>, C<'r+'>, C<'w'>, C<'w+'>,
C<'a'>, e C<'a+'> do C<fopen(3)>.

Na forma de 2 argumentos (e de 1 argumento) da chamada o modo de abertura e o
nome do arquivo devem ser concatenados (nesta ordem), possivelmente separados
por espaços. É possível omitir o modo nestas formas se o modo for C<< '<' >>.

Se o nome do arquivo começa com C<'|'>, será interpretado como um comando para o
qual será feito I<piping> da saída, e se o nome de arquivo termina com um
C<'|'>, será interpretado como um comando do qual será feito I<piping> de
entrada. Veja L<perlipc/"Utilizando open() para realizar IPC"> para obter mais
exemplos desse caso. (A invocação de C<open> a um comando que faz I<piping>
tanto de entrada quanto de saída não é permitida, mas veja L<IPC::Open2>,
L<IPC::Open3>, e L<perlipc/"Comunicação Birecional Com Outro Processo"> para
obter alternativas).

Para três ou mais argumentos, se MODE for C<'|-'>, o nome de arquivo é
interpretado como um comando para o qual será feito I<piping> da saída, e se
MODO é C<'-|'>, o nome de arquivo será interpretado como um comando do qual será
feito I<piping> de entrada. Na forma de 2 argumentos (e de 1 argumento) deve-se
substituir o traço (C<'-'>) pelo comando. Veja L<perlipc/"Utilizando open() para
realizar IPC"> para obter mais exemplos deste caso. (A invocação de C<open> a um
comando que faz I<piping> tanto de entrada quanto de saída não é permitida, mas
veja L<IPC::Open2>, L<IPC::Open3>, e L<perlipc/"Comunicação Birecional Com Outro
Processo"> para obter alternativas).

Nos na forma de três ou mais argumentos de abertura de I<pipe>, se LIST for
especificado (argumentos extras após o nome do comando) então LIST torna-se
argumentos para o comando invocado, caso a plataforma tenha suporte. O
significado de C<open> com mais de três argumentos para modos não-I<pipe> ainda
não é especificado. "Camadas" experimentais podem dar significado adicional aos
argumentos em LIST.

Na forma de 2 argumentos (e de 1 argumento) a abertura de C<'-'> abre STDIN e
abertura de C<< '>- '>> abre STDOUT.

Você pode utilizar a forma de três argumentos de C<open()> para especificar
"camadas" de IO (às vezes também chamadas de "disciplinas") a serem aplicadoas
ao I<handle> que afetam o processamento de entrada e saída (veja L<open> e
L<PerlIO> para obter mais detalhes). Por exemplo:

    open(FH, "<:utf8", "file") 

Irá abrir o arquivo codificado em UTF-8 contendo caracteres I<Unicode>, veja
L<perluniintro>. (Observe que que se as camadas forem especificados na forma de
três argumentos então as camadas padrão definidas pelo pragma C<open> são
ignorados).

C<open> retorna um valor não-zero após o êxito da execução, caso contrário,
retorna C<undef>. Se a invocação de C<open> envolveu um C<pipe>, o valor de
retorno será o PID do subprocesso.

Se estiver executando I<Perl> num sistema que distingue entre arquivos de texto
e arquivos binários, investigue L</binmode> para obter dicas de como para lidar
com este caso. A distinção fundamental entre sistemas que necessitam de
C<binmode> e os que não, são seus formatos de arquivo de texto. Todos os
sistemas requerem C<binmode> exceto sistemas como I<Unix>, I<Mac OS>, e I<Plan
9>, que delimitam linhas com um único caráter e codificam esse caráter em C como
C<"\n">.

Ao abrir um arquivo, é geralmente uma má idéia continuar a execução normalmente
se a pedido de abertura falhou, então C<open> freqüentemente é usado em conjunto
com L</die>. Mesmo nos casos onde C<die> não fará o que você quer (por exemplo,
num I<script> CGI, onde você deseja exibir uma mensagem de erro bem-formatada,
porém, há módulos que podem ajudar com esse problema) você sempre deve verificar
o valor de retorno ao abrir um arquivo. A exceção infreqüente é quando você
realmente deseja trabalhar com um filehandle fechado.

Como um caso especial, a forma de 3 argumentos combinada com o modo de
leitura/escrita e um terceiro argumento C<undef>:

    open(TMP, "+>", undef) or die ... 

abre um I<filehandle> para um arquivo temporário anônimo. A utilização de "+<"
funciona por simetria, porém você deve considerar a escrever para o arquivo
temporário primeiro. A utilização de C<seek()> será necessária antes de se
realizar a leitura.

Desde a v.5.8.0, a utilização de PerlIO é incluída na compilação de perl por
padrão. A não ser que você tenha mudado isso (ie Configure -Uuseperlio), você
pode abrir I<filehandles> para arquivos "in memory" residentes em escalares de
perl via:

    open($fh, '>', \$variable) || .. 

Se você tentar reabrir C<STDOUT> ou C<STDERR> Como um arquivo "in memory", você
precisará fechá-lo primeiro:

    close STDOUT;
    open STDOUT, '>', \$variable or die "Can't open STDOUT: $!";

Exemplos:

    $ARTICLE = 100;
    open ARTICLE or die "Can't find article $ARTICLE: $!\n";
    while (<ARTICLE>) {...

    open(LOG, '>>/usr/spool/news/twitlog');         # (log is reserved)
    # if the open fails, output is discarded

    open(DBASE, '+<', 'dbase.mine')                  # open for update
         or die "Can't open 'dbase.mine' for update: $!";

    open(DBASE, '+<dbase.mine')                           # ditto
         or die "Can't open 'dbase.mine' for update: $!";

    open(ARTICLE, '-|', "caesar <$article")     # decrypt article
         or die "Can't start caesar: $!";

    open(ARTICLE, "caesar <$article |")                  # ditto
         or die "Can't start caesar: $!";

    open(EXTRACT, "|sort >Tmp$$")                  # $$ is our process id
         or die "Can't start sort: $!";

    # in memory files
    open(MEMORY,'>', \$var)
         or die "Can't open memory file: $!";
    print MEMORY "foo!\n";                           # output will end up in $var

    # process argument list of files along with any includes

    foreach $file (@ARGV) {
         process($file, 'fh00');
    }

    sub process {
         my($filename, $input) = @_;
         $input++;                  # this is a string increment
         unless (open($input, $filename)) {
             print STDERR "Can't open $filename: $!\n";
             return;
         }

         local $_;
         while (<$input>) {                  # note use of indirection
             if (/^#include "(.*)"/) {
                  process($1, $input);
                  next;
             }
             #...                  # whatever
         }
    }

Veja L<perliol> para obter informação detalhada a respeito de C<PerlIO>.

Você pode também, na tradição da C<Bourne shell>, especificar um começo de EXPR
com C<< '>& '>>, nesse caso o resto da I<string> é interpretada como o nome de
um filehandle (ou descritor de arquivo, caso seja numérico) a ser duplicado (com
L<dup(2)>) e aberto. Você pode usar C<&> após C<< > >>, C<<< >>>>>, C<< < >>,
C<< +> >>, C<<< +>>>>>, e C<< +< >>. O modo que você especificar deve combinar
com o modo do filehandle original. (Duplicar um filehandle não leva em conta
nenhum conteúdo existente em buffers de IO). Se você usa a forma de 3 argumentos
então você pode passar um número, o nome de um filehandle ou a convencional
"referência a um glob".

Eis um script que salva, redireciona, e restaura C<STDOUT> e C<STDERR>
utilizando vários métodos:

    #!/usr/bin/perl
    open my $oldout, ">&STDOUT"     or die "Can't dup STDOUT: $!";
    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!";

    open STDOUT, '>', "foo.out" or die "Can't redirect STDOUT: $!";
    open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";

    select STDERR; $| = 1;         # make unbuffered
    select STDOUT; $| = 1;         # make unbuffered

    print STDOUT "stdout 1\n";         # this works for
    print STDERR "stderr 1\n";          # subprocesses too

    open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
    open STDERR, ">&OLDERR"    or die "Can't dup OLDERR: $!";

    print STDOUT "stdout 2\n";
    print STDERR "stderr 2\n";

Se você especificar C<< '<?=X' >>, onde C<X> é o número de um descritor de
arquivo ou um I<filehandle>, Perl fará o equivalente ao C<fdopen> do C sobre esse
descritor de arquivo (sem invocar L<dup(2)>); Isto é mais parcimonioso para
descritores de arquivo. Por exemplo:

    # open for input, reusing the fileno of $fd
    open(FILEHANDLE, "<&=$fd")

or

    open(FILEHANDLE, "<&=", $fd)

or

    # open for append, using the fileno of OLDFH
    open(FH, ">>&=", OLDFH)

or

    open(FH, ">>&=OLDFH")

Ser parcimonioso com I<filehandles> é também útil, por exemplo, quando algo
depende de descritores de arquivo, como I<locking> através de C<flock()>. Se
você meramente invocar C<< open(A, '>>&B')>>, o I<filehandle> A não terá o mesmo
descritor de arquivo que B, e portanto I<flock(A)> não irá implicar em
I<flock(B)>, e vice versa. Mas com C<< open(A, '>>&=B')>> o I<filehandles>
compartilhará o mesmo descritor de arquivo.

Observe que se você utilizar Perls mais antigos que 5.8.0, Perl utilizará
C<fdopen()> das bibliotecas normais de C para implementar a funcionalidade de
"=". Em vários sistemas de UNIX, C<fdopen()> falha quando descritores de arquivo
excedem um certo valor, geralmente 255. Para Perls 5.8.0 e subsequentes, PerlIO
é utilizado por padrão com mais frequência.

Você pode averiguar Perl foi compilado com PerlIO ou não executando C<perl -V> e
procurando a linha que contém C<useperlio=>. Se C<useperlio> é C<define>, Você
tem PerlIO, contrariamente você não faz.

Se você abrir um C<pipe> no comando C<'-'>, isto é, qualquer um de C<'|-'> ou
C<'-|'> a forma de 2 argumentos (ou 1 argumento) de C<open()>, ocorre um C<fork>
implicitamente, e o valor de retorno de C<open> é o PID do processo filho dentro
do processo pai, e C<0> dentro do processo filho. (Use C<defined($pid)> para
determinar se a abertura foi bem-sucedida). O C<filehandle> comporta-se
normalmente para o pai, porem é feito piping do I/O desse C<filehandle> para o
STDOUT/STDIN do processo filho. No processo filho o C<filehandle> não é aberto
-- o I/O acontece de/para o novo STDOUT ou STDIN. Geralmente isto é usado como o
C<open> normal com C<pipe> quando você quer exercitar mais controle sobre como o
comando de C<pipe> é executado, como quando você executa C<setuid>, e não quer
ter que escanear por meta-caracteres em comandos de shell. Os triplas a seguir
são mais ou menos equivalentes:

    open(FOO, "|tr '[a-z]' '[A-Z]'");
    open(FOO, '|-', "tr '[a-z]' '[A-Z]'");
    open(FOO, '|-') || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, '|-', "tr", '[a-z]', '[A-Z]');

    open(FOO, "cat -n '$file'|");
    open(FOO, '-|', "cat -n '$file'");
    open(FOO, '-|') || exec 'cat', '-n', $file;
    open(FOO, '-|', "cat", '-n', $file);

O último exemplo em cada bloco mostra o C<pipe> em "forma de lista", que ainda
não tem suporte em todas as plataformas. Uma boa regra geral é que se sua
plataforma tem um C<fork()> verdadeiro (Em outras palavras, se sua plataforma é
UNIX) você pode usar a forma de lista.

Veja L<perlipc/"Aberturas de Pipe Seguras"> para obter mais exemplos.

A partir da v5.6.0, Perl tentará fazer I<flush> em todos os arquivos abertos
para saída antes que qualquer operação que possa fazer um C<fork>, mas isto não
pode ser suportado em algumas plataformas (veja L<perlport>). Para ter certeza,
será necessário definir C<$|> (ou $AUTOFLUSH em inglês) ou invocar o método
C<autoflush()> do C<IO::Handle> em quaisquer I<pipes> abertos.

Em sistemas que suportam um flag de I<close-on-exec> sobre arquivos, a flag será
definida para o descritor de arquivo recém-aberto como determinado pelo valor de
$^F. Veja L<perlvar/$^F>.

O fechamento de qualquer C<filehandle> de I<pipe> faz com que o processo pai
espere que o processo filho termine, e retornar o valor de estado em C<$?>.

O nome de arquivo passado à forma de 2 argumentos (ou de 1 argumento) de open()
terá o I<whitespace> removido do começo e do fim da string, e os caráteres
normais de redirecionamento serão preservados. Esta propriedade, conhecida como
"magic open", pode ser usado a bom efeito. Um operador pode especificar F<"rsh
cat file |"> como nome de arquivo, ou você pode alterar certos nomes de arquivo
conforme necessário:

    $filename =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    open(FH, $filename) or die "Can't open $filename: $!";

Utilize a forma de 3 argumentos form para abrir um arquivo contendo carateres
"estranhos" arbitrários,

     open(FOO, '<', $file);

caso contrário será necessário proteger os C<whitespace> no começo e no final da
string.

    $file =~ s#^(\s)#./$1#;
    open(FOO, "< $file\0");

(isso poderá não funcionar em alguns sistemas de arquivos bizarros). Deve-se
conscientemente escolher entre a forma I<mágica> e a forma de 3 argumentos de
C<open()>:

    open IN, $ARGV[0];

permite que o usuário especifique um argumento do forma C<"rsh cat file |">, mas
não funciona num nome de arquivo que por acaso tenha um espaço no final,
enquanto que

    open IN, '<', $ARGV[0];

Terá as restrições opostas.

Se você quer um C<open> C "verdadeiro" (veja L<open(2)> em seu sistema), utilize
a função C<sysopen>, que não envolve nenhuma tal magia (mas poderá utilizar
filemodes com diferenças sutis comparada a C<open()> de Perl, que é equivalente
a C<fopen()> de C). Isto é outra maneira de impedir que seus nomes de arquivo
sejam interpretados. Por exemplo:

    use IO::Handle;
    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL)
         or die "sysopen $path: $!";
    $oldfh = select(HANDLE); $| = 1; select($oldfh);
    print HANDLE "stuff $$\n";
    seek(HANDLE, 0, 0);
    print "File contains: ", <HANDLE>;


Utilizar o construtor do pacote C<IO::Handle> (ou uma de suas subclasses, tais
como C<IO::File> ou C<IO::Socket>), você pode gerar C<filehandles> anônimos que
tem o escopo das variáveis contendo referências a eles, e que automaticamente
fecham sempre que você deixa o escopo:


    use IO::File;
    #...
    sub read_myfile_munged {
         my $ALL = shift;
         my $handle = new IO::File;
         open($handle, "myfile") or die "myfile: $!";
         $first = <$handle>
             or return ();     # Fechado automaticamente aqui.
         mung $first or die "mung failed";         # Ou aqui.
         return $first, <$handle> if $ALL;         # Ou aqui.
         $first;                                             # Ou aqui.
    }

Veja L</seek> para obter detalhes a respeito de como intercalar leitura e escrita. 

=item opendir DIRHANDLE,EXPR

Opens a directory named EXPR for processing by C<readdir>, C<telldir>,
C<seekdir>, C<rewinddir>, and C<closedir>.  Returns true if successful.
DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle.
DIRHANDLEs have their own namespace separate from FILEHANDLEs.

=item ord EXPR

=item ord

Retorna o valor numérico (o nativo encoding 8-bit, como ASCII ou EBCDIC, ou 
Unicode) para o primeiro caractere de EXPR. Se EXPR for omitido, usa C<$_>.

Para o reverso, veja L</chr>. Veja L<perlunicode> e L<encoding> para mais 
sobre Unicode.

=item our EXPR

=item our EXPR TYPE

=item our EXPR : ATTRS

=item our TYPE EXPR : ATTRS

An C<our> declares the listed variables to be valid globals within
the enclosing block, file, or C<eval>.  That is, it has the same
scoping rules as a "my" declaration, but does not create a local
variable.  If more than one value is listed, the list must be placed
in parentheses.  The C<our> declaration has no semantic effect unless
"use strict vars" is in effect, in which case it lets you use the
declared global variable without qualifying it with a package name.
(But only within the lexical scope of the C<our> declaration.  In this
it differs from "use vars", which is package scoped.)

An C<our> declaration declares a global variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:

    package Foo;
    our $bar;                  # declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    print $bar;                  # prints 20

Multiple C<our> declarations in the same lexical scope are allowed
if they are in different packages.  If they happened to be in the same
package, Perl will emit warnings if you have asked for them.

    use warnings;
    package Foo;
    our $bar;                  # declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    our $bar = 30;         # declares $Bar::bar for rest of lexical scope
    print $bar;                  # prints 30

    our $bar;                  # emits warning

An C<our> declaration may also have a list of attributes associated
with it.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.

The only currently recognized C<our()> attribute is C<unique> which
indicates that a single copy of the global is to be used by all
interpreters should the program happen to be running in a
multi-interpreter environment. (The default behaviour would be for
each interpreter to have its own copy of the global.)  Examples:

    our @EXPORT : unique = qw(foo);
    our %EXPORT_TAGS : unique = (bar => [qw(aa bb cc)]);
    our $VERSION : unique = "1.00";

Note that this attribute also has the effect of making the global
readonly when the first new interpreter is cloned (for example,
when the first new thread is created).

Multi-interpreter environments can come to being either through the
fork() emulation on Windows platforms, or by embedding perl in a
multi-threaded application.  The C<unique> attribute does nothing in
all other environments.

Warning: the current implementation of this attribute operates on the
typeglob associated with the variable; this means that C<our $x : unique>
also has the effect of C<our @x : unique; our %x : unique>. This may be
subject to change.

=item pack MODELO, LISTA

Toma uma LISTA de valores e converte numa string usando as regras dadas pelo
MODELO. A string resultante é a concatenação dos valores
convertidos. Geralmente, cada um valor convertido se parece com sua representação a nível de
máquina. Por exemplo, em máquinas de 32 bits, um número inteiro adaptado
pode ser representado por uma seqüência de 4 bytes.

O MODELO é uma seqüência de caracteres que representam a ordem e o tipo de valores, como segue: 

  a      Uma string com dados binários arbitrários, será completada com valores nulos.
  A      Uma string de texto (ASCII), será completada por espaços.
  Z      Uma string terminada com nulo (ASCIZ), será completada.

  b      Uma string de bits (em ordem de bit ascendente dentro de cada byte, como em vec()).
  B      Um pouco string (em ordem de bit descendente dentro de cada byte).
  H      Uma string hexadecimal (nybble baixo primeiro).
  H      Uma string hexadecimal (nybble alto primeiro).

  c      Um valor signed char.
  C      Um valor unsigned char. Utiliza apenas bytes. Veja U para Unicode.

  s      Um valor signed short;
  S      Um valor signed short ('short' significa _exatamente_ 16 bits, que
         podem diferir do que um compilador local de C chama de 'short'. Se você quer
         valores short de comprimento nativo, use o sufixo '!').

  i      Um valor signed integer.

  I      Um valor unsigned integer. (Este 'integer' tem _pelo_menos_ 32 bits de
         largura. Seu tamanho exato depende do que um compilador local de C
         chama de 'integer', e pode até ser maior que o 'long' descrito no próximo item).

  l      Um valor signed long.
  L      Um valor unsigned long. (Este 'long' tem _exatamente_ 32 bits, que
         podem diferir do que um compilador local de C chama de 'long'. Se você
         quiser comprimento nativo, use o sufixo '!').

  n      Um valor unsigned short em order de rede (big-endian).
  N      Um valor unsigned long em ordem de rede (big-endian).
  v      Um valor unsigned short em ordem "VAX" (little-endian).
  V      Um valor unsigned long em ordem "VAX" (little-endian).
           (Esses 'short' e 'long' possuem _exatamente_ 16 bits e
            _exatamente_ 32 bits, respectivamente.)

  q      Um valor signed quad (64-bit).
  Q      Um unsigned quad value. (Quads estão disponíveis só se seu sistema tem
         suporte a valores inteiros de 64 bit _e_ se Perl foi compilado com
         suporte para os mesmos. (Ocasiona um erro fatal se não for).

  j      Um valor signed integer (um integer interno do Perl, IV).
  J      Um valor unsigned integer (um unsigned integer interno do Perl, UV).


  f      Um float de simples-precisão no formato nativo.
  d      Um float de dupla-precisãono formato nativo.

  
  F      Um valor de ponto flutuante no formato nativo (um float interno do Perl,
         NV).
  D      Um float de dupla-precisão no formato nativo. (valores de
         dupla-precisão estão disponíveis apenas se seu sistema tem suporte a
         valores longos de dobro _e_ se Perl foi compilado com suporte aos mesmos.
         (Ocasiona um erro fatal se não for).

  p      Um ponteiro para uma string terminada por null.
  P      Um ponteiro para uma estrutura (string de comprimento fixo).

  u      Uma string uuencoded.
  U      Um número de caractere Unicode. Codifica para UTF-8 internamente (ou
         UTF-EBCDIC em plataformas  EBCDIC).

  w      Um inteiro com compressão BER (não um BER ASN.1, veja perlpacktut
         para obter detalhes). Seus bytes representam um unsigned integer de
         base 128, com o dígito mais significativo primeiro, com a quantidade
         mínima de dígitos possível. O bit número oito (o bit  alto) é verdadeiro
         em todos os bytes exceto o último.

  x      Um byte null.
  X      Voltar um byte.
  @      Preencher com nulls até a posição absoluta, contado do início do
         agrupamento-() mais interno. (Início de um agroupamento-()). 

As seguintes regras se aplicam: 

=over 8

=item *

Cada letra opcionalmente pode ser seguida por um número dando um contagem de
repetição. Com todos os tipos exceto C<a>, C<A>, C<Z>, C<b>, C<B>, C<h>, C<H>,
C<@>, C<x>, C<X> e C<P> a função de pack consumirá essa quantidade de valores da
LISTA. Um C<*> como contagem de repetição significa que serão utilizados todos
os valores restantes, com exceção de C<@>, C<x>, C<X>, onde é equivalente a
C<0>, e C<u>, onde é equivalente a 1 (ou 45, que é o mesmo). Uma contagem
numérica de repetição pode ser opcionalmente apresentada dentro de colchetes,
como em C<pack 'C[80]', @arr>.

Pode-se substituir a contagem de repetição por um modelo entre colchetes; então
o comprimento empacotado deste modelo em bytes será usado como contagem. Por
exemplo, C<x[L]> pula um long (pula o número de bytes num long); o modelo C<$t
X[$t] $t> é equivalente a invocar unpack() duas vezes em relação a
unpack($t). Se o modelo em colchetes contiver comandos de alinhamento (tal como
C<x![d]>), seu comprimento empacotado é calculado como se o início do modelo
tivesse o máximo alinhamento possível.

Quando usado com C<Z>, C<*> resulta na adição de um byte null terminador (então
o resultado empacotado será um mais longo que o byte C<length> do item).

O contador de repetição para C<u> é interpretado como o número máximo de bytes
codificados por linha de saída, com 0 e 1 substituído por 45.

=item * 

O C<a>, C<A>, e C<Z> Os tipos consomem apenas um valor, mas o empacota como uma
string utilizando a contagem de comprimento, completando com null ou espaça como
necessário. Ao desembrulhar, C<A> as faixas arrastando-se espaços e null,
C<Z> as faixas tudo depois do primeiro null, e C<a> retorna dados
literalmente. Ao empacotar, C<a>, e C<Z> são equivalentes.

Se o valor a ser empacotado for longo demais, ele será truncado. Se for longo
demais e uma contagem explícita for fornecida, C<Z> empacotará apenas
C<$count-1> bytes, seguido por um byte null. Assim C<Z> sempre empacota um byte
null terminador sob todas as circunstâncias.

=item * 

E forma análoga, os campos C<b> e C<B> empacotam uma string com essa quantidade
de bits. Cada byte do campo de entrada de pack() gera 1 bit do resultado. Cada
bit resultante é baseado no bit menos significativo do byte correspondente de
entrada, isto é, em C<ord($byte)%2>. Em particular, os bytes C<'0'> e C<'1'> geram
bits 0 e 1, assim como os bytes C<'\0'> e C<'\1'>.

Começando do início da string de entrada de pack(), cada uma das 8-tuplas bytes
são convertidas a 1 byte de saída. Como formato C<b> o primeiro byte da 8-tupla
determina o bit menos significativo de um byte, e com formato C<B> determina o
bit mais significativo de um byte.

Se o comprimento da string de entrada não for exatamente divisível por 8, a
sobra é empacotada como se a string de entrada fosse completada por bytes null
no fim. Da mesma forma, durante unpack() os bits 'extras' são ignorados.

Se a string de entrada de pack() for mais longa que necessário, os bytes extras
são ignorados. Um C<*> como contagem de repetição de pack() resulta na
utilização de todos os bytes do campo de entrada. Ao invocar unpack() os bits
são convertidos em uma string de C<'0'>s e C<'1'>s.

=item * 

Os campos C<h> e C<H> empacotam uma string com essa quantidade de grupos
(nybbles de 4 bits, representáveis por dígitos hexadecimais, 0-9a-f).

Cada byte do campo de entrada de pack() gera 4 bits do resultado. No caso de
bytes não-alfabéticos o resultado é baseado nos 4 bits menos-significativos do
byte de entrada, isto é, em C<ord($byte)%16>. Em particular, os bytes C<'0'> e
C<'1'> geram nybbles 0 e 1, assim como os bytes C<'\0'> e C<'\1'>. Para bytes
C<'a'..'f'> e C<'A'..'F'> o resultado é compatível com os dígitos hexadecimais
normais, de modo que C<'a'> e C<'A'> ambos geram o nybble C<0xa==10>. O
resultado para bytes C<'g'..'z'> e C<'G'..'Z'> não é bem definido.

A partir do início da string de entrada de pack(), cada par de bytes é
convertido em 1 byte de saída. Com o formato C<h> o primeiro byte do par
determina o nybble menos significativo do byte de saída, e com formato C<H>
determina o nybble mais significativo.

Se o comprimento da string de entrada não for par, comporta-se como se
completada por um byte null no fim. Da mesma forma, invocando-se unpack() os
nybbles 'extras' são ignorados.

Se a string de entrada de pack() for mais longa que necessário, os bytes extras
são ignorados. Um C<*> como contagem de repetição de pack() resulta na
utilização de todos os bytes do campo de entrada. Ao invocar unpack(), os bits
são convertidos em uma string de dígitos hexadecimais.

=item * 

O tipo C<p> empacota um ponteiro a uma string terminada por null. Você é
responsável por assegurar a string não é um valor temporário (que potencialmente
pode ser desalocada antes que você utilize o resultado empacotado). O tipo C<P>
empacota um ponteiro para uma estrutura do tamanho indicado pelo comprimento. um
ponteiro null é criada se o valor correspondente para C<p> ou C<P> for C<undef>,
O mesmo se aplica a unpack().


=item * 

O caráter de template C</> permite o empacotamento e desempacotamento de strings
onde a estrutura empacotada contém uma contagem de bytes seguida pela própria
string. Escreve-se I<length-item>C</>I<string-item>.

O I<length-item> pode ser qualquer caracter de template C<pack>, e descreve como
o valor de comprimento é empacotado. Dentre os mais úteis são os que empacotam
números inteiros, como C<n> (para strings de Java), C<w> (para ASN.1 ou SNMP) e
C<N> (Para Sun XDR).

Para C<pack>, o I<string-item> neste momento, de ser C<'A*'>, C<'a*'> ou
C<'Z*'>. Para C<unpack> o comprimento da string é obtida do I<length-item>, Mas
se você colocar '*', este será ignorado. Para todo os outros códigos, C<unpack>
aplica o valor de comprimento ao próximo item, que não deve ter uma contagem de
repetição.

    unpack 'C/a', "\04Gurusamy";        retorna 'Guru'
    unpack 'a3/A* A*', '007 Bond  J ';  retorna (' Bond','J')
    pack 'n/a* w/a*','hello,','world';  retorna "\000\006hello,\005world"

O I<length-item> não é retornado explicitamente de C<unpack>. 

É improvável que a adição de uma contagem ao I<length-item> faça algo útil, a
menos que sejam as letras C<A>, C<a> ou C<Z>. Empactor com um I<length-item> de
C<a> ou C<Z> pode introduzir caracteres C<'\000'>, que não são válidos em
strings numéricas em Perl.

=item * 

Os tipos integer C<s>, C<S>, C<l>, e C<L> podem ser seguidos imediatamente por
um C<!> para significar short nativo ou long -- como você pode ver acima, um
C<l> signifca exatamente 32 bits, o C<long> nativo (Como visto pelo compilador
local de C) pode ser maior. Isto é um problema principalmente em plataformas de
64 bits. Você pode averiguar se a utilização de C<!> faz qualquer diferença com:

    print length(pack("s")), " ", length(pack("s!")), "\n";
    print length(pack("l")), " ", length(pack("l!")), "\n";

C<i!> e C<I!> também funcionam mas só por conta de integralidade; eles são
idênticos a C<i> e C<I>.

Os tamanhos reais (em bytes) de short nativo, ints, long, e longs compridos na
plataforma onde Perl foi compilado também estão disponíveis através de L<Config>:

       use Config;
       print $Config{shortsize},    "\n";
       print $Config{intsize},      "\n";
       print $Config{longsize},     "\n";
       print $Config{longlongsize}, "\n";

(O C<$Config{longlongsize}> Será undef se seu sistema não tiver suporte a longs
compridos).

=item * 

Os formatos inteiros C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, e C<J> são
intrinsecamente não-portáveis entre processadores e sistemas operacionais porque
eles obedecem a ordem de byte "endianness" nativa. Por exemplo um número inteiro
0x12345678 de 4 bytes (305419896 decimal) seria ordenado nativamente (arranjado
e manejado pelos registros de CPU) em bytes como

       0x12 0x34 0x56 0x78         # big-endian
       0x78 0x56 0x34 0x12         # little-endian

Basicamente, o CPUS Intel e VAX CPUS little-endian, enquanto todos os outros,
por exemplo Motorola m68k/88k, PPC, Sparc, HP PA, Power, e Cray são
big-endian. Alpha e MIPS podem ser ambos: A Digital/Compaq os usou/usa em modo
little-endian; SGI/Cray usa-os em modo big-endian.

Os nomes 'big-endian' de 'little-endian' são referências cómicas ao clássico 'as
Viagens do Gulliver (vide o paper "On Holy Wars and a Plea for Peace" por Danny
Cohen, USC/ISI IEN 137, 1 de Abril 1, 1980) e os hábitos de consumo de ovos dos
Lilliputians.

Alguns sistemas podem ter ordens de byte até mesmo mais bizarras tal como:

       0x56 0x78 0x12 0x34
       0x34 0x12 0x78 0x56

Você pode ver sua preferência do sistema com:

       print join(" ", map { sprintf "%#02x", $_ }
                         unpack("C*",pack("L",0x12345678))), "\n";

A ordem de byte na plataforma onde Perl foi compilado também está disponível via
L<Config>:

       use Config;
       print $Config{byteorder}, "\n";

Ordens de byte C<'1234'> e C<'12345678'> são little-endian, C<'4321'> e
C<'87654321'> são big-endian.

Se você quer que números inteiros empacotados portáveis utilizem os formatos
C<n>, C<N>, C<v>, e C<V>, seu "endianness" de byte e tamanho são
conhecidos. Veja também L<perlport>.

=item * 

Numeros reais (float e double) estão no formato nativo de máquina apenas; devido
à multiplicidade de formatos flutuantes que existem, e a falta de uma
representação normal de 'rede', não existe nenhuma facilidade de
intercâmbio. Isto quer dizer que empacotar dados de ponto flutuante escritos
numa máquina podem não ser legíveis em outra - ainda que ambas utilizem
aritmética de ponto flutuante IEEE (já que o "endianness" da representação em
memória não é parte da especificação IEEE). Veja também L<perlport>.

Observe que Perl usa doubles internamente para todos os cálculos numéricos, e
converter de double para float e de volta para double perderá precisão (isto é,
C<unpack('f', pack('f', $foo)>) geralmente não será igual a $foo).

=item * 

Se o padrão começa com um C<U>, a string resultante será tratada como
UTF-8-encoded Unicode. Você pode forçar codificação UTF-8 em numa string com um
C<U0> inicial, e os bytes seguintes serão interpretados como caracteres
Unicode. Se você não quer que isto aconteça, você pode começar seu padrão com
C<C0> (ou algo mais) para forçar Perl não a codicar sua estring para UTF-8, em
seguida utilize C<U*> em algum lugar em seu padrão.

=item * 

Você mesmo deverá faz qualquer alinhamento ou compleição, inserindo, por
exemplo, C<'x'>s suficientes ao empacotar. Não há nenhuma maneira pela qual
C<pack()> e C<unpack()> saibam para onde os bytes estão indo nem de onde
vieram. Portanto C<pack> (e C<unpack>) maneja sua saída e entrada como
seqüências planas de bytes.

=item * 

UM grupo-() é um sub-modelo dentro de parênteses. Um grupo pode tomar um
contagem de repetição, ambos posfixos, e para unpack() também via o caracter de
template C</> . Dentro de cada repetição de um grupo, o posicionamento com C<@>
reinicia para em 0. Portanto, o resultado de:

    pack( '@1A((@2A)@3A)', 'a', 'b', 'c' )

é a string "\0a\0\0bc". 

=item * 

C<x> e C<X> aceitam o modificador C<!>. Neste caso eles agem da forma que o
alinhamento determinar: saltam para frente/para trás à posição mais próxima
alinhada num múltiplo de C<count> bytes. Por exemplo, para fazer pack() ou
unpack() de C<struct {char c; double d; char cc[2]}> em C, pode ser preciso usar
o modelo C<C x![d] d C[2]>; Isto supõe que doubles devem ser alinhados no
tamanho do double.

Comandos de alinhamento C<count> de 0 são equivalentes a C<count> de 1; ambos
resultam em no-ops.

=item * 

Um comentário num MODELO inicia com C<#> e vai até o fim de linha. Espaços em
branco podem ser usado para separar códigos de pack um do outro, mas um
modificador C<!> modificador e um contador de repetição devem seguir
imediatamente.

=item * 

Se MODELO exige mais argumentos de pack() do que os que estão presente, pack()
supõe argumentos C<''> adicionais. Se MODELO exige menos argumentos pack() do
que estão presentes, argumentos extras são ignorados.

=back

Exemplos:

    $foo = pack("CCCC",65,66,67,68);
    # foo eq "ABCD"
    $foo = pack("C4",65,66,67,68);
    # idem
    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # idem com letras cercadas por Unicode

    $foo = pack("ccxxcc",65,66,67,68);
    # foo eq "AB\0\0CD"

    # observação: os exemplos acima utilizando "C" and "c" são verdadeiros
    # apenas em sistems ASCII e derivados como ISO Latin 1
    # and UTF-8.  Em EBCDIC o primeiro exemplo seria
    # $foo = pack("CCCC",193,194,195,196);

    $foo = pack("s2",1,2);
    # "\1\0\2\0" little-endian
    # "\0\1\0\2" big-endian

    $foo = pack("a4","abcd","x","y","z");
    # "abcd"

    $foo = pack("aaaa","abcd","x","y","z");
    # "axyz"

    $foo = pack("a14","abcdefg");
    # "abcdefg\0\0\0\0\0\0\0"

    $foo = pack("i9pl", gmtime);
    # uma estrutura real tm (no meu sistema)

    $utmp_template = "Z8 Z8 Z16 L";
    $utmp = pack($utmp_template, @utmp1);
    # umaa struct utmp (BSD)

    @utmp2 = unpack($utmp_template, $utmp);
    # "@utmp1" eq "@utmp2"

    sub bintodec {
         unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
    }

    $foo = pack('sx2l', 12, 34);
    # short 12, compleição com dois zeros, long 34
    $bar = pack('s@4l', 12, 34);
    # short 12, compleição com 0 zeros até a posição 4, long 34
    # $foo eq $bar

O mesmo modelo geralmente também pode ser usado em unpack().

=item package NAMESPACE

=item package

Declares the compilation unit as being in the given namespace.  The scope
of the package declaration is from the declaration itself through the end
of the enclosing block, file, or eval (the same as the C<my> operator).
All further unqualified dynamic identifiers will be in this namespace.
A package statement affects only dynamic variables--including those
you've used C<local> on--but I<not> lexical variables, which are created
with C<my>.  Typically it would be the first declaration in a file to
be included by the C<require> or C<use> operator.  You can switch into a
package in more than one place; it merely influences which symbol table
is used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon:  C<$Package::Variable>.
If the package name is null, the C<main> package as assumed.  That is,
C<$::sail> is equivalent to C<$main::sail> (as well as to C<$main'sail>,
still seen in older code).

If NAMESPACE is omitted, then there is no current package, and all
identifiers must be fully qualified or lexicals.  However, you are
strongly advised not to make use of this feature. Its use can cause
unexpected behaviour, even crashing some versions of Perl. It is
deprecated, and will be removed from a future release.

See L<perlmod/"Packages"> for more information about packages, modules,
and classes.  See L<perlsub> for other scoping issues.

=item pipe READHANDLE,WRITEHANDLE

Opens a pair of connected pipes like the corresponding system call.
Note that if you set up a loop of piped processes, deadlock can occur
unless you are very careful.  In addition, note that Perl's pipes use
IO buffering, so you may need to set C<$|> to flush your WRITEHANDLE
after each command, depending on the application.

See L<IPC::Open2>, L<IPC::Open3>, and L<perlipc/"Bidirectional Communication">
for examples of such things.

On systems that support a close-on-exec flag on files, the flag will be set
for the newly opened file descriptors as determined by the value of $^F.
See L<perlvar/$^F>.

=item pop ARRAY

=item pop

Pops and returns the last value of the array, shortening the array by
one element.  Has an effect similar to

    $ARRAY[$#ARRAY--]

If there are no elements in the array, returns the undefined value
(although this may happen at other times as well).  If ARRAY is
omitted, pops the C<@ARGV> array in the main program, and the C<@_>
array in subroutines, just like C<shift>.

=item pos SCALAR

=item pos

Returns the offset of where the last C<m//g> search left off for the variable
in question (C<$_> is used when the variable is not specified).  Note that
0 is a valid match offset, while C<undef> indicates that the search position
is reset (usually due to match failure, but can also be because no match has
yet been performed on the scalar). C<pos> directly accesses the location used
by the regexp engine to store the offset, so assigning to C<pos> will change
that offset, and so will also influence the C<\G> zero-width assertion in
regular expressions. Because a failed C<m//gc> match doesn't reset the offset,
the return from C<pos> won't change either in this case.  See L<perlre> and
L<perlop>.

=item print FILEHANDLE LIST

=item print LIST

=item print

Prints a string or a list of strings.  Returns true if successful.
FILEHANDLE may be a scalar variable name, in which case the variable
contains the name of or a reference to the filehandle, thus introducing
one level of indirection.  (NOTE: If FILEHANDLE is a variable and
the next token is a term, it may be misinterpreted as an operator
unless you interpose a C<+> or put parentheses around the arguments.)
If FILEHANDLE is omitted, prints by default to standard output (or
to the last selected output channel--see L</select>).  If LIST is
also omitted, prints C<$_> to the currently selected output channel.
To set the default output channel to something other than STDOUT
use the select operation.  The current value of C<$,> (if any) is
printed between each LIST item.  The current value of C<$\> (if
any) is printed after the entire LIST has been printed.  Because
print takes a LIST, anything in the LIST is evaluated in list
context, and any subroutine that you call will have one or more of
its expressions evaluated in list context.  Also be careful not to
follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to
the print--interpose a C<+> or put parentheses around all the
arguments.

Note that if you're storing FILEHANDLES in an array or other expression,
you will have to use a block returning its value instead:

    print { $files[$i] } "stuff\n";
    print { $OK ? STDOUT : STDERR } "stuff\n";

=item printf FILEHANDLE FORMAT, LIST

=item printf FORMAT, LIST

Equivalente a C<print FILEHANDLE sprintf(FORMATO, LISTA)>, exceto que C<$\> (o 
separador de registro de saída) não é apensado. O primeiro argumento de lista 
será interpretado como o formato C<printf>. Veja C<sprintf> para uma explanação 
do formato dos argumento. Se C<use locale> está em ação, o caractere usado para 
o ponto decimal em números reais formtados é afetado pelo LC_NUMERIC local. 
Veja L<perllocale>.

Não caia na armadilha de usar um C<printf> quando um simples C<print> resolver. 
O C<print> é mais eficiente e menos propenso a erros.

=item prototype FUNCTION

Returns the prototype of a function as a string (or C<undef> if the
function has no prototype).  FUNCTION is a reference to, or the name of,
the function whose prototype you want to retrieve.

If FUNCTION is a string starting with C<CORE::>, the rest is taken as a
name for Perl builtin.  If the builtin is not I<overridable> (such as
C<qw//>) or its arguments cannot be expressed by a prototype (such as
C<system>) returns C<undef> because the builtin does not really behave
like a Perl function.  Otherwise, the string describing the equivalent
prototype is returned.

=item push ARRAY,LIST

Treats ARRAY as a stack, and pushes the values of LIST
onto the end of ARRAY.  The length of ARRAY increases by the length of
LIST.  Has the same effect as

    for $value (LIST) {
         $ARRAY[++$#ARRAY] = $value;
    }

but is more efficient.  Returns the new number of elements in the array.

=item q/STRING/

=item qq/STRING/

=item qr/STRING/

=item qx/STRING/

=item qw/STRING/

Generalized quotes.  See L<perlop/"Regexp Quote-Like Operators">.

=item quotemeta EXPR

=item quotemeta

Returns the value of EXPR with all non-"word"
characters backslashed.  (That is, all characters not matching
C</[A-Za-z_0-9]/> will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the C<\Q> escape in double-quoted strings.

If EXPR is omitted, uses C<$_>.

=item rand EXPR

=item rand

Returns a random fractional number greater than or equal to C<0> and less
than the value of EXPR.  (EXPR should be positive.)  If EXPR is
omitted, the value C<1> is used.  Currently EXPR with the value C<0> is
also special-cased as C<1> - this has not been documented before perl 5.8.0
and is subject to change in future versions of perl.  Automatically calls
C<srand> unless C<srand> has already been called.  See also C<srand>.

Apply C<int()> to the value returned by C<rand()> if you want random
integers instead of random fractional numbers.  For example,

    int(rand(10))

returns a random integer between C<0> and C<9>, inclusive.

(Note: If your rand function consistently returns numbers that are too
large or too small, then your version of Perl was probably compiled
with the wrong number of RANDBITS.)

=item read FILEHANDLE,SCALAR,LENGTH,OFFSET

=item read FILEHANDLE,SCALAR,LENGTH

Attempts to read LENGTH I<characters> of data into variable SCALAR
from the specified FILEHANDLE.  Returns the number of characters
actually read, C<0> at end of file, or undef if there was an error (in
the latter case C<$!> is also set).  SCALAR will be grown or shrunk
so that the last character actually read is the last character of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

The call is actually implemented in terms of either Perl's or system's
fread() call.  To get a true read(2) system call, see C<sysread>.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.

=item readdir DIRHANDLE

Returns the next directory entry for a directory opened by C<opendir>.
If used in list context, returns all the rest of the entries in the
directory.  If there are no more entries, returns an undefined value in
scalar context or a null list in list context.

If you're planning to filetest the return values out of a C<readdir>, you'd
better prepend the directory in question.  Otherwise, because we didn't
C<chdir> there, it would have been testing the wrong file.

    opendir(DIR, $some_dir) || die "can't opendir $some_dir: $!";
    @dots = grep { /^\./ && -f "$some_dir/$_" } readdir(DIR);
    closedir DIR;

=item readline EXPR

Reads from the filehandle whose typeglob is contained in EXPR.  In scalar
context, each call reads and returns the next line, until end-of-file is
reached, whereupon the subsequent call returns undef.  In list context,
reads until end-of-file is reached and returns a list of lines.  Note that
the notion of "line" used here is however you may have defined it
with C<$/> or C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.

When C<$/> is set to C<undef>, when readline() is in scalar
context (i.e. file slurp mode), and when an empty file is read, it
returns C<''> the first time, followed by C<undef> subsequently.

This is the internal function implementing the C<< <EXPR> >>
operator, but you can use it directly.  The C<< <EXPR> >>
operator is discussed in more detail in L<perlop/"I/O Operators">.

    $line = <STDIN>;
    $line = readline(*STDIN);                  # same thing

If readline encounters an operating system error, C<$!> will be set with the
corresponding error message.  It can be helpful to check C<$!> when you are
reading from filehandles you don't trust, such as a tty or a socket.  The
following example uses the operator form of C<readline>, and takes the necessary
steps to ensure that C<readline> was successful.

    for (;;) {
        undef $!;
        unless (defined( $line = <> )) {
            die $! if $!;
            last; # reached EOF
        }
        # ...
    }

=item readlink EXPR

=item readlink

Returns the value of a symbolic link, if symbolic links are
implemented.  If not, gives a fatal error.  If there is some system
error, returns the undefined value and sets C<$!> (errno).  If EXPR is
omitted, uses C<$_>.

=item readpipe EXPR

EXPR is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi-line) string.  In list context, returns a list of lines
(however you've defined lines with C<$/> or C<$INPUT_RECORD_SEPARATOR>).
This is the internal function implementing the C<qx/EXPR/>
operator, but you can use it directly.  The C<qx/EXPR/>
operator is discussed in more detail in L<perlop/"I/O Operators">.

=item recv SOCKET,SCALAR,LENGTH,FLAGS

Receives a message on a socket.  Attempts to receive LENGTH characters
of data into variable SCALAR from the specified SOCKET filehandle.
SCALAR will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if SOCKET's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of recvfrom(2) system call.
See L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see the C<open>
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.

=item redo LABEL

=item redo

The C<redo> command restarts the loop block without evaluating the
conditional again.  The C<continue> block, if any, is not executed.  If
the LABEL is omitted, the command refers to the innermost enclosing
loop.  This command is normally used by programs that want to lie to
themselves about what was just input:

    # a simpleminded Pascal comment stripper
    # (warning: assumes no { or } in strings)
    LINE: while (<STDIN>) {
         while (s|({.*}.*){.*}|$1 |) {}
         s|{.*}| |;
         if (s|{.*| |) {
             $front = $_;
             while (<STDIN>) {
                  if (/}/) {         # end of comment?
                      s|^|$front\{|;
                      redo LINE;
                  }
             }
         }
         print;
    }

C<redo> cannot be used to retry a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

Note that a block by itself is semantically identical to a loop
that executes once.  Thus C<redo> inside such a block will effectively
turn it into a looping construct.

See also L</continue> for an illustration of how C<last>, C<next>, and
C<redo> work.

=item ref EXPR

=item ref

Returns a non-empty string if EXPR is a reference, the empty
string otherwise. If EXPR
is not specified, C<$_> will be used.  The value returned depends on the
type of thing the reference is a reference to.
Builtin types include:

    SCALAR
    ARRAY
    HASH
    CODE
    REF
    GLOB
    LVALUE

If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of C<ref> as a C<typeof> operator.

    if (ref($r) eq "HASH") {
         print "r is a reference to a hash.\n";
    }
    unless (ref($r)) {
         print "r is not a reference at all.\n";
    }
    if (UNIVERSAL::isa($r, "HASH")) {  # for subclassing
         print "r is a reference to something that isa hash.\n";
    }

See also L<perlref>.

=item rename OLDNAME,NEWNAME

Changes the name of a file; an existing file NEWNAME will be
clobbered.  Returns true for success, false otherwise.

Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system I<mv> command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check L<perlport> and either the
rename(2) manpage or equivalent system documentation for details.

=item require VERSION

=item require EXPR

=item require

Demands a version of Perl specified by VERSION, or demands some semantics
specified by EXPR or by C<$_> if EXPR is not supplied.

VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION).  A fatal error is produced at run time if
VERSION is greater than the version of the current Perl interpreter.
Compare with L</use>, which can do a similar check at compile time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl which do not support this syntax.  The equivalent numeric
version should be used instead.

    require v5.6.1;         # run time version check
    require 5.6.1;         # ditto
    require 5.006_001;         # ditto; preferred for backwards compatibility

Otherwise, demands that a library file be included if it hasn't already
been included.  The file is included via the do-FILE mechanism, which is
essentially just a variety of C<eval>.  Has semantics similar to the
following subroutine:

    sub require {
       my ($filename) = @_;
       if (exists $INC{$filename}) {
           return 1 if $INC{$filename};
           die "Compilation failed in require";
       }
       my ($realfilename,$result);
       ITER: {
           foreach $prefix (@INC) {
               $realfilename = "$prefix/$filename";
               if (-f $realfilename) {
                   $INC{$filename} = $realfilename;
                   $result = do $realfilename;
                   last ITER;
               }
           }
           die "Can't find $filename in \@INC";
       }
       if ($@) {
           $INC{$filename} = undef;
           die $@;
       } elsif (!$result) {
           delete $INC{$filename};
           die "$filename did not return true value";
       } else {
           return $result;
       }
    }

Note that the file will not be included twice under the same specified
name.

The file must return true as the last statement to indicate
successful execution of any initialization code, so it's customary to
end such a file with C<1;> unless you're sure it'll return true
otherwise.  But it's better just to put the C<1;>, in case you add more
statements.

If EXPR is a bareword, the require assumes a "F<.pm>" extension and
replaces "F<::>" with "F</>" in the filename for you,
to make it easy to load standard modules.  This form of loading of
modules does not risk altering your namespace.

In other words, if you try this:

        require Foo::Bar;    # a splendid bareword

The require function will actually look for the "F<Foo/Bar.pm>" file in the
directories specified in the C<@INC> array.

But if you try this:

        $class = 'Foo::Bar';
        require $class;              # $class is not a bareword
    #or
        require "Foo::Bar";  # not a bareword because of the ""

The require function will look for the "F<Foo::Bar>" file in the @INC array and
will complain about not finding "F<Foo::Bar>" there.  In this case you can do:

        eval "require $class";

Now that you understand how C<require> looks for files in the case of
a bareword argument, there is a little extra functionality going on
behind the scenes.  Before C<require> looks for a "F<.pm>" extension,
it will first look for a filename with a "F<.pmc>" extension.  A file
with this extension is assumed to be Perl bytecode generated by
L<B::Bytecode|B::Bytecode>.  If this file is found, and its modification
time is newer than a coinciding "F<.pm>" non-compiled file, it will be
loaded in place of that non-compiled file ending in a "F<.pm>" extension.

You can also insert hooks into the import facility, by putting directly
Perl code into the @INC array.  There are three forms of hooks: subroutine
references, array references and blessed objects.

Subroutine references are the simplest case.  When the inclusion system
walks through @INC and encounters a subroutine, this subroutine gets
called with two parameters, the first being a reference to itself, and the
second the name of the file to be included (e.g. "F<Foo/Bar.pm>").  The
subroutine should return C<undef> or a filehandle, from which the file to
include will be read.  If C<undef> is returned, C<require> will look at
the remaining elements of @INC.

If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This enables to pass indirectly some arguments to
the subroutine.

In other words, you can write:

    push @INC, \&my_sub;
    sub my_sub {
         my ($coderef, $filename) = @_;         # $coderef is \&my_sub
         ...
    }

or:

    push @INC, [ \&my_sub, $x, $y, ... ];
    sub my_sub {
         my ($arrayref, $filename) = @_;
         # Retrieve $x, $y, ...
         my @parameters = @$arrayref[1..$#$arrayref];
         ...
    }

If the hook is an object, it must provide an INC method, that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as it is always forced into package
C<main>.)  Here is a typical code layout:

    # In Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
         my ($self, $filename) = @_;
         ...
    }

    # In the main program
    push @INC, new Foo(...);

Note that these hooks are also permitted to set the %INC entry
corresponding to the files they have loaded. See L<perlvar/%INC>.

For a yet-more-powerful import facility, see L</use> and L<perlmod>.

=item reset EXPR

=item reset

Generally used in a C<continue> block at the end of a loop to clear
variables and reset C<??> searches so that they work again.  The
expression is interpreted as a list of single characters (hyphens
allowed for ranges).  All variables and arrays beginning with one of
those letters are reset to their pristine state.  If the expression is
omitted, one-match searches (C<?pattern?>) are reset to match again.  Resets
only variables or searches in the current package.  Always returns
1.  Examples:

    reset 'X';                  # reset all X variables
    reset 'a-z';         # reset lower case variables
    reset;                  # just reset ?one-time? searches

Resetting C<"A-Z"> is not recommended because you'll wipe out your
C<@ARGV> and C<@INC> arrays and your C<%ENV> hash.  Resets only package
variables--lexical variables are unaffected, but they clean themselves
up on scope exit anyway, so you'll probably want to use them instead.
See L</my>.

=item return EXPR

=item return

Returns from a subroutine, C<eval>, or C<do FILE> with the value
given in EXPR.  Evaluation of EXPR may be in list, scalar, or void
context, depending on how the return value will be used, and the context
may vary from one execution to the next (see C<wantarray>).  If no EXPR
is given, returns an empty list in list context, the undefined value in
scalar context, and (of course) nothing at all in a void context.

(Note that in the absence of an explicit C<return>, a subroutine, eval,
or do FILE will automatically return the value of the last expression
evaluated.)

=item reverse LISTA

Em contexto de lista, retorna um valor lista consistindo dos elementos de LISTA 
na ordem oposta. Em contexto escalar, concatena os elementos de LISTA e retorna 
um valor string com todos os caracteres em ordem oposta.

    print reverse <>;           # linha tac, última linha primeira

    undef $/;                   # para eficiência do <>
    print scalar reverse <>;    # caractere tac, última linha primeira

Usado sem argumentos em contexto escalar, reverse() reverte C<$_>.

Este operdor é também cômodo para inverter um hash, embora existam algumas 
advertências. Se um valor está duplicado em hash original, somente um dos dois 
pode ser representado como uma chave no hash invertido. Além disso, isto tem 
que desatar um hash e contruir um inteiro novo, que pode demorar algum tempo 
sobre um hash enorme, como de um arquivo DBM.

    %by_name = reverse %by_address;         # Inverte o hash

=item rewinddir DIRHANDLE

Sets the current position to the beginning of the directory for the
C<readdir> routine on DIRHANDLE.

=item rindex STR,SUBSTR, POSIÇÃO

=item rindex STR,SUBSTR

Funciona exatemente como index() exceto que ele retorna a posição da ÚLTIMA
ocorrência de SUBSTR em STR. Se POSIÇÃO for especificada, retorna a última
ocorrência até ou antes daquela posição.

=item rmdir FILENAME

=item rmdir

Remove o diretório especificado por FILENAME se aquele diretório estiver vazio.
Se conseguir retorna verdadeiro, em outro caso retorna falso e defini C<$!>
(errno). Se FILENAME for omitido, usa C<$_>.

=item s///

O operador de substituição. Veja L<perlop>.

=item scalar EXPR

Forces EXPR to be interpreted in scalar context and returns the value
of EXPR.

    @counts = ( scalar @a, scalar @b, scalar @c );

There is no equivalent operator to force an expression to
be interpolated in list context because in practice, this is never
needed.  If you really wanted to do so, however, you could use
the construction C<@{[ (some expression) ]}>, but usually a simple
C<(some expression)> suffices.

Because C<scalar> is unary operator, if you accidentally use for EXPR a
parenthesized list, this behaves as a scalar comma expression, evaluating
all but the last element in void context and returning the final element
evaluated in scalar context.  This is seldom what you want.

The following single statement:

         print uc(scalar(&foo,$bar)),$baz;

is the moral equivalent of these two:

         &foo;
         print(uc($bar),$baz);

See L<perlop> for more details on unary operators and the comma operator.

=item seek FILEHANDLE,POSITION,WHENCE

Sets FILEHANDLE's position, just like the C<fseek> call of C<stdio>.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position
I<in bytes> to POSITION, C<1> to set it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).  For WHENCE you may use the constants C<SEEK_SET>,
C<SEEK_CUR>, and C<SEEK_END> (start of the file, current position, end
of the file) from the Fcntl module.  Returns C<1> upon success, C<0>
otherwise.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because implementing that would render seek() and tell() rather slow).

If you want to position file for C<sysread> or C<syswrite>, don't use
C<seek>--buffering makes its effect on the file's system position
unpredictable and non-portable.  Use C<sysseek> instead.

Due to the rules and rigors of ANSI C, on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's clearerr(3).
A WHENCE of C<1> (C<SEEK_CUR>) is useful for not moving the file position:

    seek(TEST,0,1);

This is also useful for applications emulating C<tail -f>.  Once you hit
EOF on your read, and then sleep for a while, you might have to stick in a
seek() to reset things.  The C<seek> doesn't change the current position,
but it I<does> clear the end-of-file condition on the handle, so that the
next C<< <FILE> >> makes Perl try again to read something.  We hope.

If that doesn't work (some IO implementations are particularly
cantankerous), then you may need something more like this:

    for (;;) {
         for ($curpos = tell(FILE); $_ = <FILE>;
             $curpos = tell(FILE)) {
             # search for some stuff and put it into files
         }
         sleep($for_a_while);
         seek(FILE, $curpos, 0);
    }

=item seekdir DIRHANDLE,POS

Sets the current position for the C<readdir> routine on DIRHANDLE.  POS
must be a value returned by C<telldir>.  Has the same caveats about
possible directory compaction as the corresponding system library
routine.

=item select FILEHANDLE

=item select

Returns the currently selected filehandle.  Sets the current default
filehandle for output, if FILEHANDLE is supplied.  This has two
effects: first, a C<write> or a C<print> without a filehandle will
default to this FILEHANDLE.  Second, references to variables related to
output will refer to this output channel.  For example, if you have to
set the top of form format for more than one output channel, you might
do the following:

    select(REPORT1);
    $^ = 'report1_top';
    select(REPORT2);
    $^ = 'report2_top';

FILEHANDLE may be an expression whose value gives the name of the
actual filehandle.  Thus:

    $oldfh = select(STDERR); $| = 1; select($oldfh);

Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:

    use IO::Handle;
    STDERR->autoflush(1);

=item select RBITS,WBITS,EBITS,TIMEOUT

This calls the select(2) system call with the bit masks specified, which
can be constructed using C<fileno> and C<vec>, along these lines:

    $rin = $win = $ein = '';
    vec($rin,fileno(STDIN),1) = 1;
    vec($win,fileno(STDOUT),1) = 1;
    $ein = $rin | $win;

If you want to select on many filehandles you might wish to write a
subroutine:

    sub fhbits {
         my(@fhlist) = split(' ',$_[0]);
         my($bits);
         for (@fhlist) {
             vec($bits,fileno($_),1) = 1;
         }
         $bits;
    }
    $rin = fhbits('STDIN TTY SOCK');

The usual idiom is:

    ($nfound,$timeleft) =
      select($rout=$rin, $wout=$win, $eout=$ein, $timeout);

or to block until something becomes ready just do this

    $nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);

Most systems do not bother to return anything useful in $timeleft, so
calling select() in scalar context just returns $nfound.

Any of the bit masks can also be undef.  The timeout, if specified, is
in seconds, which may be fractional.  Note: not all implementations are
capable of returning the $timeleft.  If not, they always return
$timeleft equal to the supplied $timeout.

You can effect a sleep of 250 milliseconds this way:

    select(undef, undef, undef, 0.25);

Note that whether C<select> gets restarted after signals (say, SIGALRM)
is implementation-dependent.  See also L<perlport> for notes on the
portability of C<select>.

On error, C<select> behaves like the select(2) system call : it returns
-1 and sets C<$!>.

Note: on some Unixes, the select(2) system call may report a socket file
descriptor as "ready for reading", when actually no data is available,
thus a subsequent read blocks. It can be avoided using always the
O_NONBLOCK flag on the socket. See select(2) and fcntl(2) for further
details.

B<WARNING>: One should not attempt to mix buffered I/O (like C<read>
or <FH>) with C<select>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread> instead.

=item semctl ID,SEMNUM,CMD,ARG

Calls the System V IPC function C<semctl>.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is IPC_STAT or
GETALL, then ARG must be a variable which will hold the returned
semid_ds structure or semaphore value array.  Returns like C<ioctl>:
the undefined value for error, "C<0 but true>" for zero, or the actual
return value otherwise.  The ARG must consist of a vector of native
short integers, which may be created with C<pack("s!",(0)x$nsem)>.
See also L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::Semaphore>
documentation.

=item semget KEY,NSEMS,FLAGS

Calls the System V IPC function semget.  Returns the semaphore id, or
the undefined value if there is an error.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::SysV::Semaphore>
documentation.

=item semop KEY,OPSTRING

Calls the System V IPC function semop to perform semaphore operations
such as signalling and waiting.  OPSTRING must be a packed array of
semop structures.  Each semop structure can be generated with
C<pack("s!3", $semnum, $semop, $semflag)>.  The number of semaphore
operations is implied by the length of OPSTRING.  Returns true if
successful, or false if there is an error.  As an example, the
following code waits on semaphore $semnum of semaphore id $semid:

    $semop = pack("s!3", $semnum, -1, 0);
    die "Semaphore trouble: $!\n" unless semop($semid, $semop);

To signal the semaphore, replace C<-1> with C<1>.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::SysV::Semaphore>
documentation.

=item send SOCKET,MSG,FLAGS,TO

=item send SOCKET,MSG,FLAGS

Sends a message on a socket.  Attempts to send the scalar MSG to the
SOCKET filehandle.  Takes the same flags as the system call of the
same name.  On unconnected sockets you must specify a destination to
send TO, in which case it does a C C<sendto>.  Returns the number of
characters sent, or the undefined value if there is an error.  The C
system call sendmsg(2) is currently unimplemented.  See
L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or the
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded
Unicode characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be sent.

=item setpgrp PID,PGRP

Sets the current process group for the specified PID, C<0> for the current
process.  Will produce a fatal error if used on a machine that doesn't
implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted,
it defaults to C<0,0>.  Note that the BSD 4.2 version of C<setpgrp> does not
accept any arguments, so only C<setpgrp(0,0)> is portable.  See also
C<POSIX::setsid()>.

=item setpriority WHICH,WHO,PRIORITY

Sets the current priority for a process, a process group, or a user.
(See setpriority(2).)  Will produce a fatal error if used on a machine
that doesn't implement setpriority(2).

=item setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL

Sets the socket option requested.  Returns undefined if there is an
error.  OPTVAL may be specified as C<undef> if you don't want to pass an
argument.

=item shift ARRAY

=item shift

Shifts the first value of the array off and returns it, shortening the
array by 1 and moving everything down.  If there are no elements in the
array, returns the undefined value.  If ARRAY is omitted, shifts the
C<@_> array within the lexical scope of subroutines and formats, and the
C<@ARGV> array at file scopes or within the lexical scopes established by
the C<eval ''>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>, and C<END {}>
constructs.

See also C<unshift>, C<push>, and C<pop>.  C<shift> and C<unshift> do the
same thing to the left end of an array that C<pop> and C<push> do to the
right end.

=item shmctl ID,CMD,ARG

Calls the System V IPC function shmctl.  You'll probably have to say

    use IPC::SysV;

first to get the correct constant definitions.  If CMD is C<IPC_STAT>,
then ARG must be a variable which will hold the returned C<shmid_ds>
structure.  Returns like ioctl: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.

=item shmget KEY,SIZE,FLAGS

Calls the System V IPC function shmget.  Returns the shared memory
segment id, or the undefined value if there is an error.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.

=item shmread ID,VAR,POS,SIZE

=item shmwrite ID,STRING,POS,SIZE

Reads or writes the System V shared memory segment ID starting at
position POS for size SIZE by attaching to it, copying in/out, and
detaching from it.  When reading, VAR must be a variable that will
hold the data read.  When writing, if STRING is too long, only SIZE
bytes are used; if STRING is too short, nulls are written to fill out
SIZE bytes.  Return true if successful, or false if there is an error.
shmread() taints the variable. See also L<perlipc/"SysV IPC">,
C<IPC::SysV> documentation, and the C<IPC::Shareable> module from CPAN.

=item shutdown SOCKET,HOW

Shuts down a socket connection in the manner indicated by HOW, which
has the same interpretation as in the system call of the same name.

    shutdown(SOCKET, 0);    # I/we have stopped reading data
    shutdown(SOCKET, 1);    # I/we have stopped writing data
    shutdown(SOCKET, 2);    # I/we have stopped using this socket

This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.

=item sin EXPR

=item sin

Retorna o seno de EXPR (em radianos). Se EXPR for omitido,
retorna o seno de C<$_>.

Para a função inversa do sena, você pode usar a função C<Math::Trig::asin>
ou então a relação:

    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }

=item sleep EXPR

=item sleep

Causes the script to sleep for EXPR seconds, or forever if no EXPR.
May be interrupted if the process receives a signal such as C<SIGALRM>.
Returns the number of seconds actually slept.  You probably cannot
mix C<alarm> and C<sleep> calls, because C<sleep> is often implemented
using C<alarm>.

On some older systems, it may sleep up to a full second less than what
you requested, depending on how it counts seconds.  Most modern systems
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.

For delays of finer granularity than one second, you may use Perl's
C<syscall> interface to access setitimer(2) if your system supports
it, or else see L</select> above.  The Time::HiRes module (from CPAN,
and starting from Perl 5.8 part of the standard distribution) may also
help.

See also the POSIX module's C<pause> function.

=item socket SOCKET,DOMAIN,TYPE,PROTOCOL

Opens a socket of the specified kind and attaches it to filehandle
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for
the system call of the same name.  You should C<use Socket> first
to get the proper definitions imported.  See the examples in
L<perlipc/"Sockets: Client/Server Communication">.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See L<perlvar/$^F>.

=item socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL

Creates an unnamed pair of sockets in the specified domain, of the
specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as
for the system call of the same name.  If unimplemented, yields a fatal
error.  Returns true if successful.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of $^F.  See L<perlvar/$^F>.

Some systems defined C<pipe> in terms of C<socketpair>, in which a call
to C<pipe(Rdr, Wtr)> is essentially:

    use Socket;
    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown(Rdr, 1);        # no more writing for reader
    shutdown(Wtr, 0);        # no more reading for writer

See L<perlipc> for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using IP sockets to localhost if your system implements
sockets but not socketpair.

=item sort SUBNAME LIST

=item sort BLOCK LIST

=item sort LIST

In list context, this sorts the LIST and returns the sorted list value.
In scalar context, the behaviour of C<sort()> is undefined.

If SUBNAME or BLOCK is omitted, C<sort>s in standard string comparison
order.  If SUBNAME is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than C<0>,
depending on how the elements of the list are to be ordered.  (The C<<
<=> >> and C<cmp> operators are extremely useful in such routines.)
SUBNAME may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.

If the subroutine's prototype is C<($$)>, the elements to be compared
are passed by reference in C<@_>, as for a normal subroutine.  This is
slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine
as the package global variables $a and $b (see example below).  Note that
in the latter case, it is usually counter-productive to declare $a and
$b as lexicals.

In either case, the subroutine may not be recursive.  The values to be
compared are always passed by reference, so don't modify them.

You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in L<perlsyn> or with C<goto>.

When C<use locale> is in effect, C<sort LIST> sorts LIST according to the
current collation locale.  See L<perllocale>.

Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable, and I<could> go quadratic.  (A I<stable> sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), I<quadratic> behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a sort pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.  See L<sort>.

Examples:

    # sort lexically
    @articles = sort @files;

    # same thing, but with explicit sort routine
    @articles = sort {$a cmp $b} @files;

    # now case-insensitively
    @articles = sort {uc($a) cmp uc($b)} @files;

    # same thing in reversed order
    @articles = sort {$b cmp $a} @files;

    # sort numerically ascending
    @articles = sort {$a <=> $b} @files;

    # sort numerically descending
    @articles = sort {$b <=> $a} @files;

    # this sorts the %age hash by value instead of key
    # using an in-line function
    @eldest = sort { $age{$b} <=> $age{$a} } keys %age;

    # sort using explicit subroutine name
    sub byage {
         $age{$a} <=> $age{$b};         # presuming numeric
    }
    @sortedclass = sort byage @class;

    sub backwards { $b cmp $a }
    @harry  = qw(dog cat x Cain Abel);
    @george = qw(gone chased yz Punished Axed);
    print sort @harry;
             # prints AbelCaincatdogx
    print sort backwards @harry;
             # prints xdogcatCainAbel
    print sort @george, 'to', @harry;
             # prints AbelAxedCainPunishedcatchaseddoggonetoxyz

    # inefficiently sort by descending numeric compare using
    # the first integer after the first = sign, or the
    # whole record case-insensitively otherwise

    @new = sort {
         ($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
                               ||
                     uc($a)  cmp  uc($b)
    } @old;

    # same thing, but much more efficiently;
    # we'll build auxiliary indices instead
    # for speed
    @nums = @caps = ();
    for (@old) {
         push @nums, /=(\d+)/;
         push @caps, uc($_);
    }

    @new = @old[ sort {
                           $nums[$b] <=> $nums[$a]
                                     ||
                           $caps[$a] cmp $caps[$b]
                         } 0..$#old
                ];

    # same thing, but without any temps
    @new = map { $_->[0] }
           sort { $b->[1] <=> $a->[1]
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, uc($_)] } @old;

    # using a prototype allows you to use any comparison subroutine
    # as a sort subroutine (including other package's subroutines)
    package other;
    sub backwards ($$) { $_[1] cmp $_[0]; }         # $a and $b are not set here

    package main;
    @new = sort other::backwards @old;

    # guarantee stability, regardless of algorithm
    use sort 'stable';
    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;

    # force use of mergesort (not portable outside Perl 5.8)
    use sort '_mergesort';  # note discouraging _
    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;

If you're using strict, you I<must not> declare $a
and $b as lexicals.  They are package globals.  That means
if you're in the C<main> package and type

    @articles = sort {$b <=> $a} @files;

then C<$a> and C<$b> are C<$main::a> and C<$main::b> (or C<$::a> and C<$::b>),
but if you're in the C<FooPack> package, it's the same as typing

    @articles = sort {$FooPack::b <=> $FooPack::a} @files;

The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying C<$x[1]> is less than C<$x[2]> and
sometimes saying the opposite, for example) the results are not
well-defined.

Because C<< <=> >> returns C<undef> when either operand is C<NaN>
(not-a-number), and because C<sort> will trigger a fatal error unless the
result of a comparison is defined, when sorting with a comparison function
like C<< $a <=> $b >>, be careful about lists that might contain a C<NaN>.
The following example takes advantage of the fact that C<NaN != NaN> to
eliminate any C<NaN>s from the input.

    @result = sort { $a <=> $b } grep { $_ == $_ } @input;

=item splice ARRAY,OFFSET,LENGTH,LIST

=item splice ARRAY,OFFSET,LENGTH

=item splice ARRAY,OFFSET

=item splice ARRAY

Removes the elements designated by OFFSET and LENGTH from an array, and
replaces them with the elements of LIST, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or C<undef> if no elements are
removed.  The array grows or shrinks as necessary.
If OFFSET is negative then it starts that far from the end of the array.
If LENGTH is omitted, removes everything from OFFSET onward.
If LENGTH is negative, removes the elements from OFFSET onward
except for -LENGTH elements at the end of the array.
If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is
past the end of the array, perl issues a warning, and splices at the
end of the array.

The following equivalences hold (assuming C<< $[ == 0 and $#a >= $i >> )

    push(@a,$x,$y)         splice(@a,@a,0,$x,$y)
    pop(@a)                  splice(@a,-1)
    shift(@a)                  splice(@a,0,1)
    unshift(@a,$x,$y)         splice(@a,0,0,$x,$y)
    $a[$i] = $y                  splice(@a,$i,1,$y)

Example, assuming array lengths are passed before arrays:

    sub aeq {         # compare two list values
         my(@a) = splice(@_,0,shift);
         my(@b) = splice(@_,0,shift);
         return 0 unless @a == @b;         # same len?
         while (@a) {
             return 0 if pop(@a) ne pop(@b);
         }
         return 1;
    }
    if (&aeq($len,@foo[1..$len],0+@bar,@bar)) { ... }

=item split /PATTERN/,EXPR,LIMIT

=item split /PATTERN/,EXPR

=item split /PATTERN/

=item split

Splits the string EXPR into a list of strings and returns that list.  By
default, empty leading fields are preserved, and empty trailing ones are
deleted.  (If all fields are empty, they are considered to be trailing.)

In scalar context, returns the number of fields found and splits into
the C<@_> array.  Use of split in scalar context is deprecated, however,
because it clobbers your subroutine arguments.

If EXPR is omitted, splits the C<$_> string.  If PATTERN is also omitted,
splits on whitespace (after skipping any leading whitespace).  Anything
matching PATTERN is taken to be a delimiter separating the fields.  (Note
that the delimiter may be longer than one character.)

If LIMIT is specified and positive, it represents the maximum number
of fields the EXPR will be split into, though the actual number of
fields returned depends on the number of times PATTERN matches within
EXPR.  If LIMIT is unspecified or zero, trailing null fields are
stripped (which potential users of C<pop> would do well to remember).
If LIMIT is negative, it is treated as if an arbitrarily large LIMIT
had been specified.  Note that splitting an EXPR that evaluates to the
empty string always returns the empty list, regardless of the LIMIT
specified.

A pattern matching the null string (not to be confused with
a null pattern C<//>, which is just one member of the set of patterns
matching a null string) will split the value of EXPR into separate
characters at each point it matches that way.  For example:

    print join(':', split(/ */, 'hi there'));

produces the output 'h:i:t:h:e:r:e'.

As a special case for C<split>, using the empty pattern C<//> specifically
matches only the null string, and is not be confused with the regular use
of C<//> to mean "the last successful pattern match".  So, for C<split>,
the following:

    print join(':', split(//, 'hi there'));

produces the output 'h:i: :t:h:e:r:e'.

Empty leading (or trailing) fields are produced when there are positive
width matches at the beginning (or end) of the string; a zero-width match
at the beginning (or end) of the string does not produce an empty field.
For example:

   print join(':', split(/(?=\w)/, 'hi there!'));

produces the output 'h:i :t:h:e:r:e!'.

The LIMIT parameter can be used to split a line partially

    ($login, $passwd, $remainder) = split(/:/, $_, 3);

When assigning to a list, if LIMIT is omitted, or zero, Perl supplies
a LIMIT one larger than the number of variables in the list, to avoid
unnecessary work.  For the list above LIMIT would have been 4 by
default.  In time critical applications it behooves you not to split
into more fields than you really need.

If the PATTERN contains parentheses, additional list elements are
created from each matching substring in the delimiter.

    split(/([,-])/, "1-10,20", 3);

produces the list value

    (1, '-', 10, ',', 20)

If you had the entire header of a normal Unix email message in $header,
you could split it up into fields and their values this way:

    $header =~ s/\n\s+/ /g;  # fix continuation lines
    %hdrs   =  (UNIX_FROM => split /^(\S*?):\s*/m, $header);

The pattern C</PATTERN/> may be replaced with an expression to specify
patterns that vary at runtime.  (To do runtime compilation only once,
use C</$variable/o>.)

As a special case, specifying a PATTERN of space (S<C<' '>>) will split on
white space just as C<split> with no arguments does.  Thus, S<C<split(' ')>> can
be used to emulate B<awk>'s default behavior, whereas S<C<split(/ /)>>
will give you as many null initial fields as there are leading spaces.
A C<split> on C</\s+/> is like a S<C<split(' ')>> except that any leading
whitespace produces a null first field.  A C<split> with no arguments
really does a S<C<split(' ', $_)>> internally.

A PATTERN of C</^/> is treated as if it were C</^/m>, since it isn't
much use otherwise.

Example:

    open(PASSWD, '/etc/passwd');
    while (<PASSWD>) {
        chomp;
        ($login, $passwd, $uid, $gid,
         $gcos, $home, $shell) = split(/:/);
         #...
    }

As with regular pattern matching, any capturing parentheses that are not
matched in a C<split()> will be set to C<undef> when returned:

    @fields = split /(A)|B/, "1A2B3";
    # @fields is (1, 'A', 2, undef, 3)

=item sprintf FORMATO, LISTA

Retorna uma string formatada pelas usuais convenções C<printf> da biblioteca de 
função C C<sprintf>. Veja abaixo para mais detalhes e veja L<sprintf(3)> ou 
L<printf(3)> no seu sistema para uma explanação dos princípios gerais.

Por exemplo:

        # Formatar número com até 8 zeros à esquerda
        $result = sprintf("%08d", $number);

        # Arredondar número para 3 dígitos depois do ponto decimal
        $rounded = sprintf("%.3f", $number);

Perl faz sua própria formatação C<sprintf> -- emulando a função C sprintf(3), 
mas não a utilizando exceto para números de ponto flutuante, e mesmo assim
apenas os modificadores padrão são permitidos. Como resultado, extensões
fora do padrão em seu C<sprintf> local não estão disponíveis via Perl. 

Diferente de C<printf>, C<sprintf> não faz o que você provavelmente deseja
quando passa um array como seu primeiro argumento. O array é tratado em
contexto escalar, e em vez de usar o elemento 0 do array como formato, Perl 
usará o quantidade de elementos no array como um formato, o que quase
nunca é útil. 

O C<sprintf> do Perl permite as seguintes conversões universalmente conhecidas:

   %%         um sinal de porcentagem
   %c         um caractere obtido de número
   %s         uma string
   %d         um inteiro com sinal, em decimal
   %u         um inteiro sem sinal, em decimal
   %o         um inteiro sem sinal, em octal
   %x         um inteiro sem sinal, em hexadecimal
   %e         um número com ponto flutuante, em notação científica
   %f         um número com ponto flutuante, em notação decimal fixa
   %g         um número com ponto flutuante, em notação %e ou %f

Além disso, Perl permite as seguintes conversões largamente suportadas:

   %X         semelhante a %x, mas utilizando letras maiúsculas
   %E         semelhante a %e, mas utilizando um "E" maiúsculo
   %G         semelhante a %g, mas com "E" maiúsculo (se aplicável)
   %b         um inteiro sem sinal, em binário
   %p         um ponteiro (emite os endereços de valores do Perl em hexadecimal)
   %n         especial: *armazena* o número de caracteres emitidos até o momento
             na próxima variável da lista de parâmetros

Finalmente, para retro-compatibilidade (realmente "retro"), Perl 
permite essas conversões desnecessárias mas largamente suportadas.

   %i         um sinônimo para %d
   %D         um sinônimo para %ld
   %U         um sinônimo para %lu
   %O         um sinônimo para %lo
   %F         um sinônimo para %f

Note que o número de dígitos do expoente na notação científica produzido por 
C<%e>, C<%E>, C<%g> e C<%G> para números com módulo do expoente menor que 
100 é dependente do sistema: pode ser três ou menos (preenchido com zeros
conforme necessário). Em outras palavras, 1.23 vezes dez elevado a 99
pode ser "1.23e99" ou "1.23e099".

Entre o C<%> e a letra de formatação, você pode especificar uma série de 
atributos adicionais controlando a interpretação do formato. Em ordem,
são eles:

=over 4

=item índice do parâmetro de formato

Um índice explícito do parâmetro de formato, como C<2$>. Por padrão
o sprintf irá formatar o próximo argumento não utilizado na lista,
mas isso permite que você obtenha os argumentos fora de ordem. Por
exemplo:

  printf '%2$d %1$d', 12, 34;      # exibe "34 12"
  printf '%3$d %d %1$d', 1, 2, 3;  # exibe "3 1 1"

=item flags

uma ou mais das seguintes:

   espaço   prefixa número não-negativo com espaço
   +        prefixa número não-negativo com um sinal de adição
   -        alinha à esquerda dentro do campo
   0        usa zeros, não espaços, para alinhar à direita
   #        força prefixo "0" para todos os octais,
            prefixa hexadecimais não-zero com "0x" ou "0X",
            prefixa binários não-zero com "0b" ou "0B"

Por exemplo:

   printf '<% d>',  12;   # exibe "< 12>"
   printf '<%+d>',  12;   # exibe "<+12>"
   printf '<%6s>',  12;   # exibe "< 12>"
   printf '<%-6s>', 12;   # exibe "<12 >"
   printf '<%06s>', 12;   # exibe "<000012>"
   printf '<%#o>',  12;   # exibe "<014>"
   printf '<%#x>',  12;   # exibe "<0xc>"
   printf '<%#X>',  12;   # exibe "<0XC>"
   printf '<%#b>',  12;   # exibe "<0b1100>"
   printf '<%#B>',  12;   # exibe "<0B1100>"

Quando um espaço e um sinal de adição são dados ao mesmo tempo como flags,
o sinal de adição é usado como prefixo para números positivos.

  printf '<%+ d>', 12;   # exibe "<+12>"
  printf '<% +d>', 12;   # exibe "<+12>"

Quando a flag # e uma precisão são fornecidos em uma conversão %o,
a precisão é incrementada caso necessário para o prefixo "0".

  printf '<%#.5o>', 012;      # exibe "<00012>"
  printf '<%#.5o>', 012345;   # exibe "<012345>"
  printf '<%#.0o>', 0;        # exibe "<0>"

=item flag de vetor

Esta flag diz ao Perl para interpretar a string fornecida como um vetor
de inteiros, um para cada caractere na string. Perl aplica o formato
para cada inteiro por vez, e então junta as strings resultantes com
um separador (por padrão, um ponto C<.>). Isso pode ser útil para
exibir valores ordinais de caracteres em strings arbitrárias:

  printf "%vd", "AB\x{100}";           # exibe "65.66.256"
  printf "version is v%vd\n", $^V;     # a versão do Perl

Coloque um asterisco C<*> antes do C<v> para substituir a string usada
para separar os números:

  printf "address is %*vX\n", ":", $addr;   # endereço IPv6
  printf "bits are %0*v8b\n", " ", $bits;   # string aleatória de bits

Você também pode especificar explicitamente o número do argumento a ser
utilizado para a junção das strings usando algo como C<*2$v>; por exemplo:

  printf '%*4$vX %*4$vX %*4$vX', @addr[1..3], ":";   # 3 endereços IPv6

=item largura (mínima)

Os argumentos geralmente são formatados para serem largos apenas o
suficiente para exibir o valor dado. Você pode substituir a largura
colocando um número aqui, ou obter a largura do próximo argumento
(com C<*>) ou a partir de um argumento especificado (por exemplo, com C<*2$>):

  printf '<%s>', "a";       # exibe "<a>"
  printf '<%6s>', "a";      # exibe "<     a>"
  printf '<%*s>', 6, "a";   # exibe "<     a>"
  printf '<%*2$s>', "a", 6; # exibe "<     a>"
  printf '<%2s>', "long";   # exibe "<long>" (não truncado)

Se a largura do campo obtida via C<*> for negativa, ela terá o mesmo
efeito que a flag C<->: alinhar à esquerda.

=item precisão, ou largura máxima
X<precisão>

Você pode especificar uma precisão (para conversões numéricas) ou a
largura máxima (para conversões de strings) especificando um C<.>
seguido de um número. Para os formatos de ponto flutuante, exceto
'g' e 'G', isso especifica quantas casas à direita do ponto decimal
deverão ser exibidas (o padrão são 6). Por exemplo:

  # esses exemplos estão sujeitos a variações especificas de sistema
  printf '<%f>', 1;    # exibe "<1.000000>"
  printf '<%.1f>', 1;  # exibe "<1.0>"
  printf '<%.0f>', 1;  # exibe "<1>"
  printf '<%e>', 10;   # exibe "<1.000000e+01>"
  printf '<%.1e>', 10; # exibe "<1.0e+01>"

Para "g" e "G", isso especifica o número máximo de dígitos a serem
exibidos, incluindo os que vem antes do ponto decimal e os depois;
por exemplo:

  # esses exemplos estão sujeitos a variações especificas de sistema
  printf '<%g>', 1;        # exibe "<1>"
  printf '<%.10g>', 1;     # exibe "<1>"
  printf '<%g>', 100;      # exibe "<100>"
  printf '<%.1g>', 100;    # exibe "<1e+02>"
  printf '<%.2g>', 100.01; # exibe "<1e+02>"
  printf '<%.5g>', 100.01; # exibe "<100.01>"
  printf '<%.4g>', 100.01; # exibe "<100>"

Para conversões de números inteiros, especificar uma precisão implica
que a saída do número em si deve ser preenchida com zeros à esquerda
até a largura especificada, em que a flag 0 é ignorada:

  printf '<%.6d>', 1;      # exibe "<000001>"
  printf '<%+.6d>', 1;     # exibe "<+000001>"
  printf '<%-10.6d>', 1;   # exibe "<000001    >"
  printf '<%10.6d>', 1;    # exibe "<    000001>"
  printf '<%010.6d>', 1;   # exibe "<    000001>"
  printf '<%+10.6d>', 1;   # exibe "<   +000001>"

  printf '<%.6x>', 1;      # exibe "<000001>"
  printf '<%#.6x>', 1;     # exibe "<0x000001>"
  printf '<%-10.6x>', 1;   # exibe "<000001    >"
  printf '<%10.6x>', 1;    # exibe "<    000001>"
  printf '<%010.6x>', 1;   # exibe "<    000001>"
  printf '<%#10.6x>', 1;   # exibe "<  0x000001>"

Para conversões de strings, especificar uma precisão trunca a string
para que ocupe a largura especificada:

  printf '<%.5s>', "truncated";   # exibe "<trunc>"
  printf '<%10.5s>', "truncated"; # exibe "<     trunc>"

Você também pode obter a precisão do próximo argumento usando C<.*>:

  printf '<%.6x>', 1;       # exibe "<000001>"
  printf '<%.*x>', 6, 1;    # exibe "<000001>"

Se a precisão obtida através do C<*> for negativa, conta como se
não houvesse precisão definida.

  printf '<%.*s>',  7, "string";   # exibe "<string>"
  printf '<%.*s>',  3, "string";   # exibe "<str>"
  printf '<%.*s>',  0, "string";   # exibe "<>"
  printf '<%.*s>', -1, "string";   # exibe "<string>"

  printf '<%.*d>',  1, 0;   # exibe "<0>"
  printf '<%.*d>',  0, 0;   # exibe "<>"
  printf '<%.*d>', -1, 0;   # exibe "<0>"

Atualmente não é possível obter a precisão de um número específico,
mas pretende-se permitir isso no futuro, por exemplo usando C<.*2$>:

  printf "<%.*2$x>", 1, 6;   # INVÁLIDO, mas no futuro vai exibir "<000001>"

=item tamanho 

Para conversões numéricas, você pode especificar o tamanho para interpretar
o número usando C<l>, C<h>, C<V>, C<q>, C<L>, ou C<ll>. Para conversões
de inteiro (C<d u o x X b i D U O>), os números são normalmente assumidos
com o tamanho padrão de inteiros em sua plataforma (geralmente 32 ou 64
bits), mas você pode substituir isso para usar um dos tipos padrão de C,
conforme suportados pelo compilador usado para compilar o seu Perl:

   l           interpreta inteiro como os tipos "long" ou "unsigned long" do C
   h           interpreta inteiro como os tipos "short" ou "unsigned short" do C
   q, L or ll  interpreta inteiro como os tipos "long long", "unsigned long long" do C.
               ou "quads" (geralmente inteiros de 64 bits)

Esse último irá gerar uma exceção se o Perl não entende "quads" na sua
instalação. (Isso exige que a plataforma suporte quads nativamente, ou
que o Perl tenha sido compilado especificamente para suportar quads.)
Você pode descobrir se o seu Perl suporta quads via L<Config>:

    use Config;
    if ($Config{use64bitint} eq "define" || $Config{longsize} >= 8) {
        print "Nice quads!\n";
    }

Para conversões de ponto flutuante (C<e f g E F G>), os números são
normalmente assumidos com o tamanho de ponto flutuante da sua plataforma
("double" on "long double"), mas você pode forçar o "long double"
com C<q>, C<L>, ou C<ll> se sua plataforma os suporta. Você pode
descobrir se o seu Perl suporta "long double" através do L<Config>:

    use Config;
    print "long doubles\n" if $Config{d_longdbl} eq "define";

Você pode descobrir se o Perl considera "long double" como o padrão para
o tamanho de ponto flutuante a ser usado em sua plataforma via L<Config>:

    use Config;
    if ($Config{uselongdouble} eq "define") {
    print "long doubles by default\n";
    }

Também pode ser que "long double" e "double" sejam a mesma coisa:

        use Config;
        ($Config{doublesize} == $Config{longdblsize}) &&
                print "doubles are long doubles\n";

O especificador de tamanho C<V> não tem efeito para código Perl, mas é
suportado para compatibilidade com código XS. Ele significa "use o
tamanho padrão para números inteiros ou pontos flutuantes do Perl",
que é o padrão.

=item ordem dos argumentos

Normalmente, o sprintf() recebe o próximo argumento não utilizado
como o valor a ser formatado para cada especificação de formato.
Se a especificação do formato usa C<*> para exigir argumentos
adicionais, estes são consumidos a partir da lista de argumentos
na ordem em que aparecerem na especificação do formato I<antes>
do valor a ser formatado. Quando um argumento é especificado por
um índice explícito, isso não afeta a ordem normal dos argumentos,
mesmo quando o índice fornecido explicitamente teria sido o
argumento seguinte.

Assim: 

    printf "<%*.*s>", $a, $b, $c;

usa C<$a> para largura, C<$b> para precisão, e C<$c>
como o valor a ser formatado; enquanto:

  printf "<%*1$.*s>", $a, $b;

utilizaria C<$a> para largura e precisão, e C<$b> como valor
a ser formatado.

Aqui estão alguns outros exemplos; tenha em mente que ao utilizar
índices explícitos, pode ser necessário escapar o C<$>:

  printf "%2\$d %d\n",    12, 34;        # vai exibir "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;        # vai exibir "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;    # vai exibir "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;    # vai exibir " 34 12\n"

=back

Se C<use locale> estiver em vigor e POSIX::setlocale() tiver sido
chamado, o caractere usado como separador decimal em números de
ponto flutuante formatados é afetado pelo locale LC_NUMERIC.
Veja L<perllocale> e L<POSIX>.

=item sqrt EXPR

=item sqrt

Retorna a raiz quadrada de EXPR. Se EXPR for omitida, retorna a
raiz quadrada de C<$_>. Funciona apenas com operandos não-negativos,
a menos que você tenha carregado o módulo padrão Math::Complex

    use Math::Complex;
    print sqrt(-2);    # exibe 1.4142135623731i

=item srand EXPR

=item srand

Sets the random number seed for the C<rand> operator.

The point of the function is to "seed" the C<rand> function so that
C<rand> can produce a different sequence each time you run your
program.

If srand() is not called explicitly, it is called implicitly at the
first use of the C<rand> operator.  However, this was not the case in
versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>.

Most programs won't even call srand() at all, except those that
need a cryptographically-strong starting point rather than the
generally acceptable default, which is based on time of day,
process ID, and memory allocation, or the F</dev/urandom> device,
if available.

You can call srand($seed) with the same $seed to reproduce the
I<same> sequence from rand(), but this is usually reserved for
generating predictable results for testing or debugging.
Otherwise, don't call srand() more than once in your program.

Do B<not> call srand() (i.e. without an argument) more than once in
a script.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
srand() again actually I<loses> randomness.

Most implementations of C<srand> take an integer and will silently
truncate decimal numbers.  This means C<srand(42)> will usually
produce the same results as C<srand(42.1)>.  To be safe, always pass
C<srand> an integer.

In versions of Perl prior to 5.004 the default seed was just the
current C<time>.  This isn't a particularly good seed, so many old
programs supply their own seed value (often C<time ^ $$> or C<time ^
($$ + ($$ << 15))>), but that isn't necessary any more.

Note that you need something much more random than the default seed for
cryptographic purposes.  Checksumming the compressed output of one or more
rapidly changing operating system status programs is the usual method.  For
example:

    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip`);

If you're particularly concerned with this, see the C<Math::TrulyRandom>
module in CPAN.

Frequently called programs (like CGI scripts) that simply use

    time ^ $$

for a seed can fall prey to the mathematical property that

    a^b == (a+1)^(b+1)

one-third of the time.  So don't do that.

=item stat FILEHANDLE

=item stat EXPR

=item stat

Returns a 13-element list giving the status info for a file, either
the file opened via FILEHANDLE, or named by EXPR.  If EXPR is omitted,
it stats C<$_>.  Returns a null list if the stat fails.  Typically used
as follows:

    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
       $atime,$mtime,$ctime,$blksize,$blocks)
           = stat($filename);

Not all fields are supported on all filesystem types.  Here are the
meanings of the fields:

  0 dev      device number of filesystem
  1 ino      inode number
  2 mode     file mode  (type and permissions)
  3 nlink    number of (hard) links to the file
  4 uid      numeric user ID of file's owner
  5 gid      numeric group ID of file's owner
  6 rdev     the device identifier (special files only)
  7 size     total size of file, in bytes
  8 atime    last access time in seconds since the epoch
  9 mtime    last modify time in seconds since the epoch
 10 ctime    inode change time in seconds since the epoch (*)
 11 blksize  preferred block size for file system I/O
 12 blocks   actual number of blocks allocated

(The epoch was at 00:00 January 1, 1970 GMT.)

(*) Not all fields are supported on all filesystem types. Notably, the
ctime field is non-portable.  In particular, you cannot expect it to be a
"creation time", see L<perlport/"Files and Filesystems"> for details.

If C<stat> is passed the special filehandle consisting of an underline, no
stat is done, but the current contents of the stat structure from the
last C<stat>, C<lstat>, or filetest are returned.  Example:

    if (-x $file && (($d) = stat(_)) && $d < 0) {
         print "$file is executable NFS file\n";
    }

(This works on machines only for which the device number is negative
under NFS.)

Because the mode contains both the file type and its permissions, you
should mask off the file type portion and (s)printf using a C<"%o">
if you want to see the real permissions.

    $mode = (stat($filename))[2];
    printf "Permissions are %04o\n", $mode & 07777;

In scalar context, C<stat> returns a boolean value indicating success
or failure, and, if successful, sets the information associated with
the special filehandle C<_>.

The File::stat module provides a convenient, by-name access mechanism:

    use File::stat;
    $sb = stat($filename);
    printf "File is %s, size is %s, perm %04o, mtime %s\n",
         $filename, $sb->size, $sb->mode & 07777,
         scalar localtime $sb->mtime;

You can import symbolic mode constants (C<S_IF*>) and functions
(C<S_IS*>) from the Fcntl module:

    use Fcntl ':mode';

    $mode = (stat($filename))[2];

    $user_rwx      = ($mode & S_IRWXU) >> 6;
    $group_read    = ($mode & S_IRGRP) >> 3;
    $other_execute =  $mode & S_IXOTH;

    printf "Permissions are %04o\n", S_IMODE($mode), "\n";

    $is_setuid     =  $mode & S_ISUID;
    $is_setgid     =  S_ISDIR($mode);

You could write the last two using the C<-u> and C<-d> operators.
The commonly available C<S_IF*> constants are

    # Permissions: read, write, execute, for user, group, others.

    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
    S_IRWXO S_IROTH S_IWOTH S_IXOTH

    # Setuid/Setgid/Stickiness/SaveText.
    # Note that the exact meaning of these is system dependent.

    S_ISUID S_ISGID S_ISVTX S_ISTXT

    # File types.  Not necessarily all are available on your system.

    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_ISCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT

    # The following are compatibility aliases for S_IRUSR, S_IWUSR, S_IXUSR.

    S_IREAD S_IWRITE S_IEXEC

and the C<S_IF*> functions are

    S_IMODE($mode)         the part of $mode containing the permission bits
                           and the setuid/setgid/sticky bits

    S_IFMT($mode)         the part of $mode containing the file type
                           which can be bit-anded with e.g. S_IFREG
                        or with the following functions

    # The operators -f, -d, -l, -b, -c, -p, and -S.

    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)

    # No direct -X operator counterpart, but for the first one
    # the -g operator is often equivalent.  The ENFMT stands for
    # record flocking enforcement, a platform-dependent feature.

    S_ISENFMT($mode) S_ISWHT($mode)

See your native chmod(2) and stat(2) documentation for more details
about the C<S_*> constants.  To get status info for a symbolic link
instead of the target file behind the link, use the C<lstat> function.

=item study SCALAR

=item study

Takes extra time to study SCALAR (C<$_> if unspecified) in anticipation of
doing many pattern matches on the string before it is next modified.
This may or may not save time, depending on the nature and number of
patterns you are searching on, and on the distribution of character
frequencies in the string to be searched--you probably want to compare
run times with and without it to see which runs faster.  Those loops
which scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most.  You may have only
one C<study> active at a time--if you study a different scalar the first
is "unstudied".  (The way C<study> works is this: a linked list of every
character in the string to be searched is made, so we know, for
example, where all the C<'k'> characters are.  From each search string,
the rarest character is selected, based on some static frequency tables
constructed from some C programs and English text.  Only those places
that contain this "rarest" character are examined.)

For example, here is a loop that inserts index producing entries
before any line containing a certain pattern:

    while (<>) {
         study;
         print ".IX foo\n"          if /\bfoo\b/;
         print ".IX bar\n"          if /\bbar\b/;
         print ".IX blurfl\n"          if /\bblurfl\b/;
         # ...
         print;
    }

In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<f>
will be looked at, because C<f> is rarer than C<o>.  In general, this is
a big win except in pathological cases.  The only question is whether
it saves you more time than it took to build the linked list in the
first place.

Note that if you have to look for strings that you don't know till
runtime, you can build an entire loop as a string and C<eval> that to
avoid recompiling all your patterns all the time.  Together with
undefining C<$/> to input entire files as one record, this can be very
fast, often faster than specialized programs like fgrep(1).  The following
scans a list of files (C<@files>) for a list of words (C<@words>), and prints
out the names of those files that contain a match:

    $search = 'while (<>) { study;';
    foreach $word (@words) {
         $search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
    }
    $search .= "}";
    @ARGV = @files;
    undef $/;
    eval $search;                  # this screams
    $/ = "\n";                  # put back to normal input delimiter
    foreach $file (sort keys(%seen)) {
         print $file, "\n";
    }

=item sub NAME BLOCK

=item sub NAME (PROTO) BLOCK

=item sub NAME : ATTRS BLOCK

=item sub NAME (PROTO) : ATTRS BLOCK

This is subroutine definition, not a real function I<per se>.
Without a BLOCK it's just a forward declaration.  Without a NAME,
it's an anonymous function declaration, and does actually return
a value: the CODE ref of the closure you just created.

See L<perlsub> and L<perlref> for details about subroutines and
references, and L<attributes> and L<Attribute::Handlers> for more
information about attributes.

=item substr EXPR,DESLOCAMENTO,COMPRIMENTO,SUBSTITUIÇÃO

=item substr EXPR,DESLOCAMENTO,COMPRIMENTO

=item substr EXPR,DESLOCAMENTO

Extrai uma sub string de EXPR e a retorna. O primeiro caractere do deslocamento 
é C<0>, ou o que quer que você tenha definido em C<$[> (mas não faça isso). Se 
DESLOCAMENTO for negativo (ou mais precisamente, menor que C<$[>), inicia este 
deslocamento do final da string. Se COMPRIMENTO for omitido, retorna tudo até o 
final da string. Se COMPRIMENTO for negativo, deixa muitos caracteres fora do 
final da string.

Você pode usar a função substr() como um lvalue, caso no qual EXPR deve ser um 
lvalue. Se você atribuir algo mais curto que COMPRIMENTO, a string será 
contraída, e se você atribuir algo mais longo do que COMPRIMENTO, a string irá 
crescer para acomodá-lo. Para manter a string no mesmo comprimento você pode 
precisar preencher ou talhar sua valor usando C<sprintf>.

Se DESLOCAMENTO e COMPRIMENTO especificam uma sub string que está em parte fora 
da string, somente a parte dentro da string é retornada. Se a sub string está 
além das extremidades da string, substr() retorna um valor indefinido e produz 
uma advertência. Quando usado com um lvalue, especificando uma sub string que 
está inteiramente fora da string é um erro fatal. Aqui está um exemplo 
mostrando o comportamento em casos limite:

    my $name = 'fred';
    substr($name, 4) = 'dy';            # $name agora é 'freddy'
    my $null = substr $name, 6, 2;      # retorna '' (sem advertência)
    my $oops = substr $name, 7;         # retorna undef, com advertência
    substr($name, 7) = 'gap';           # erro fatal

Uma alternativa a usar substr() como um lvalue é especificar a string de 
substituição como o quarto argumento. Isto lhe permite substituir pates da EXPR 
e retornar o que havia antes em uma única operação, exatamente como você 
consegue com splice().

Se o lvalue retornado pelo substr é usado depois de EXPR é modificado de 
qualquer forma, o comportamento pode não ser com oexperado e o está sujeito a 
modificação. Este aviso inclui código como C<print(substr($foo,$a,$b)=$bar)> ou 
C<(substr($foo,$a,$b)=$bar)=$fud> (onde $foo é modificado via atribuição de sub 
string, e então a substr é usada novamente), ou onde a substr() é apelidada via 
laço C<foreach> ou passada como um parâmetro ou uma referência para que receba 
então o apelido, parâmetro, ou referência derreferida também é usada depois da 
original EXPR foi alterada ou é atribuída e então utilizada uma segunda vez.

=item symlink OLDFILE,NEWFILE

Creates a new filename symbolically linked to the old filename.
Returns C<1> for success, C<0> otherwise.  On systems that don't support
symbolic links, produces a fatal error at run time.  To check for that,
use eval:

    $symlink_exists = eval { symlink("",""); 1 };

=item syscall NUMBER, LIST

Calls the system call specified as the first element of the list,
passing the remaining elements as arguments to the system call.  If
unimplemented, produces a fatal error.  The arguments are interpreted
as follows: if a given argument is numeric, the argument is passed as
an int.  If not, the pointer to the string value is passed.  You are
responsible to make sure a string is pre-extended long enough to
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to C<syscall>
because Perl has to assume that any string pointer might be written
through.  If your
integer arguments are not literals and have never been interpreted in a
numeric context, you may need to add C<0> to them to force them to look
like numbers.  This emulates the C<syswrite> function (or vice versa):

    require 'syscall.ph';                  # may need to run h2ph
    $s = "hi there\n";
    syscall(&SYS_write, fileno(STDOUT), $s, length $s);

Note that Perl supports passing of up to only 14 arguments to your system call,
which in practice should usually suffice.

Syscall returns whatever value returned by the system call it calls.
If the system call fails, C<syscall> returns C<-1> and sets C<$!> (errno).
Note that some system calls can legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$!=0;> before the call and
check the value of C<$!> if syscall returns C<-1>.

There's a problem with C<syscall(&SYS_pipe)>: it returns the file
number of the read end of the pipe it creates.  There is no way
to retrieve the file number of the other end.  You can avoid this
problem by using C<pipe> instead.

=item sysopen FILEHANDLE,FILENAME,MODE

=item sysopen FILEHANDLE,FILENAME,MODE,PERMS

Opens the file whose filename is given by FILENAME, and associates it
with FILEHANDLE.  If FILEHANDLE is an expression, its value is used as
the name of the real filehandle wanted.  This function calls the
underlying operating system's C<open> function with the parameters
FILENAME, MODE, PERMS.

The possible values and flag bits of the MODE parameter are
system-dependent; they are available via the standard module C<Fcntl>.
See the documentation of your operating system's C<open> to see which
values and flag bits are available.  You may combine several flags
using the C<|>-operator.

Some of the most common values are C<O_RDONLY> for opening the file in
read-only mode, C<O_WRONLY> for opening the file in write-only mode,
and C<O_RDWR> for opening the file in read-write mode.

For historical reasons, some values work on almost every system
supported by perl: zero means read-only, one means write-only, and two
means read/write.  We know that these values do I<not> work under
OS/390 & VM/ESA Unix and on the Macintosh; you probably don't want to
use them in new code.

If the file named by FILENAME does not exist and the C<open> call creates
it (typically because MODE includes the C<O_CREAT> flag), then the value of
PERMS specifies the permissions of the newly created file.  If you omit
the PERMS argument to C<sysopen>, Perl uses the octal value C<0666>.
These permission values need to be in octal, and are modified by your
process's current C<umask>.

In many systems the C<O_EXCL> flag is available for opening files in
exclusive mode.  This is B<not> locking: exclusiveness means here that
if the file already exists, sysopen() fails.  C<O_EXCL> may not work
on network filesystems, and has no effect unless the C<O_CREAT> flag
is set as well.  Setting C<O_CREAT|O_EXCL> prevents the file from
being opened if it is a symbolic link.  It does not protect against
symbolic links in the file's path.

Sometimes you may want to truncate an already-existing file.  This
can be done using the C<O_TRUNC> flag.  The behavior of
C<O_TRUNC> with C<O_RDONLY> is undefined.

You should seldom if ever use C<0644> as argument to C<sysopen>, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See the perlfunc(1) entry on C<umask> for more
on this.

Note that C<sysopen> depends on the fdopen() C library function.
On many UNIX systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the C<sfio>
library, or perhaps using the POSIX::open() function.

See L<perlopentut> for a kinder, gentler explanation of opening files.

=item sysread FILEHANDLE,SCALAR,LENGTH,OFFSET

=item sysread FILEHANDLE,SCALAR,LENGTH

Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE, using the system call read(2).  It bypasses
buffered IO, so mixing this with other kinds of reads, C<print>,
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
bytes actually read, C<0> at end of file, or undef if there was an
error (in the latter case C<$!> is also set).  SCALAR will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

There is no syseof() function, which is ok, since eof() doesn't work
very well on device files (like ttys) anyway.  Use sysread() and check
for a return value for 0 to decide whether you're done.

Note that if the filehandle has been marked as C<:utf8> Unicode
characters are read instead of bytes (the LENGTH, OFFSET, and the
return value of sysread() are in Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.

=item sysseek FILEHANDLE,POSITION,WHENCE

Sets FILEHANDLE's system position in bytes using the system call
lseek(2).  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).

Note the I<in bytes>: even if the filehandle has been set to operate
on characters (for example by using the C<:utf8> I/O layer), tell()
will return byte offsets, not character offsets (because implementing
that would render sysseek() very slow).

sysseek() bypasses normal buffered IO, so mixing this with reads (other
than C<sysread>, for example C<< <> >> or read()) C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion.

For WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>,
and C<SEEK_END> (start of the file, current position, end of the file)
from the Fcntl module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a "systell" function:

         use Fcntl 'SEEK_CUR';
         sub systell { sysseek($_[0], 0, SEEK_CUR) }

Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string C<"0 but true">; thus C<sysseek> returns
true on success and false on failure, yet you can still easily determine
the new position.

=item system LIST

=item system PROGRAM LIST

Does exactly the same thing as C<exec LIST>, except that a fork is
done first, and the parent process waits for the child process to
complete.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in LIST,
or if LIST is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to C<execvp>, which is
more efficient.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.

The return value is the exit status of the program as returned by the
C<wait> call.  To get the actual exit value shift right by eight (see below).
See also L</exec>.  This is I<not> what you want to use to capture
the output from a command, for that you should use merely backticks or
C<qx//>, as described in L<perlop/"`STRING`">.  Return value of -1
indicates a failure to start the program (inspect $! for the reason).

Like C<exec>, C<system> allows you to lie to a program about its name if
you use the C<system PROGRAM LIST> syntax.  Again, see L</exec>.

Since C<SIGINT> and C<SIGQUIT> are ignored during the execution of
C<system>, if you expect your program to terminate on receipt of these
signals you will need to arrange to do so yourself based on the return
value.

    @args = ("command", "arg1", "arg2");
    system(@args) == 0
          or die "system @args failed: $?"

You can check all the failure possibilities by inspecting
C<$?> like this:

    if ($? == -1) {
         print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
         printf "child died with signal %d, %s coredump\n",
             ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
         printf "child exited with value %d\n", $? >> 8;
    }

or more portably by using the W*() calls of the POSIX extension;
see L<perlport> for more information.

When the arguments get executed via the system shell, results
and return codes will be subject to its quirks and capabilities.
See L<perlop/"`STRING`"> and L</exec> for details.

=item syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET

=item syswrite FILEHANDLE,SCALAR,LENGTH

=item syswrite FILEHANDLE,SCALAR

Attempts to write LENGTH bytes of data from variable SCALAR to the
specified FILEHANDLE, using the system call write(2).  If LENGTH is
not specified, writes whole SCALAR.  It bypasses buffered IO, so
mixing this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because the perlio and
stdio layers usually buffers data.  Returns the number of bytes
actually written, or C<undef> if there was an error (in this case the
errno variable C<$!> is also set).  If the LENGTH is greater than the
available data in the SCALAR after the OFFSET, only as much data as is
available will be written.

An OFFSET may be specified to write the data from some part of the
string other than the beginning.  A negative OFFSET specifies writing
that many characters counting backwards from the end of the string.
In the case the SCALAR is empty you can use OFFSET but only zero offset.

Note that if the filehandle has been marked as C<:utf8>, Unicode
characters are written instead of bytes (the LENGTH, OFFSET, and the
return value of syswrite() are in UTF-8 encoded Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.

=item tell FILEHANDLE

=item tell

Returns the current position I<in bytes> for FILEHANDLE, or -1 on
error.  FILEHANDLE may be an expression whose value gives the name of
the actual filehandle.  If FILEHANDLE is omitted, assumes the file
last read.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because that would render seek() and tell() rather slow).

The return value of tell() for the standard streams like the STDIN
depends on the operating system: it may return -1 or something else.
tell() on pipes, fifos, and sockets usually returns -1.

There is no C<systell> function.  Use C<sysseek(FH, 0, 1)> for that.

Do not use tell() (or other buffered I/O operations) on a file handle
that has been manipulated by sysread(), syswrite() or sysseek().
Those functions ignore the buffering, while tell() does not.

=item telldir DIRHANDLE

Returns the current position of the C<readdir> routines on DIRHANDLE.
Value may be given to C<seekdir> to access a particular location in a
directory.  Has the same caveats about possible directory compaction as
the corresponding system library routine.

=item tie VARIABLE,CLASSNAME,LIST

This function binds a variable to a package class that will provide the
implementation for the variable.  VARIABLE is the name of the variable
to be enchanted.  CLASSNAME is the name of a class implementing objects
of correct type.  Any additional arguments are passed to the C<new>
method of the class (meaning C<TIESCALAR>, C<TIEHANDLE>, C<TIEARRAY>,
or C<TIEHASH>).  Typically these are arguments such as might be passed
to the C<dbm_open()> function of C.  The object returned by the C<new>
method is also returned by the C<tie> function, which would be useful
if you want to access other methods in CLASSNAME.

Note that functions such as C<keys> and C<values> may return huge lists
when used on large objects, like DBM files.  You may prefer to use the
C<each> function to iterate over such.  Example:

    # print out history file offsets
    use NDBM_File;
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (($key,$val) = each %HIST) {
         print $key, ' = ', unpack('L',$val), "\n";
    }
    untie(%HIST);

A class implementing a hash should have the following methods:

    TIEHASH classname, LIST
    FETCH this, key
    STORE this, key, value
    DELETE this, key
    CLEAR this
    EXISTS this, key
    FIRSTKEY this
    NEXTKEY this, lastkey
    SCALAR this
    DESTROY this
    UNTIE this

A class implementing an ordinary array should have the following methods:

    TIEARRAY classname, LIST
    FETCH this, key
    STORE this, key, value
    FETCHSIZE this
    STORESIZE this, count
    CLEAR this
    PUSH this, LIST
    POP this
    SHIFT this
    UNSHIFT this, LIST
    SPLICE this, offset, length, LIST
    EXTEND this, count
    DESTROY this
    UNTIE this

A class implementing a file handle should have the following methods:

    TIEHANDLE classname, LIST
    READ this, scalar, length, offset
    READLINE this
    GETC this
    WRITE this, scalar, length, offset
    PRINT this, LIST
    PRINTF this, format, LIST
    BINMODE this
    EOF this
    FILENO this
    SEEK this, position, whence
    TELL this
    OPEN this, mode, LIST
    CLOSE this
    DESTROY this
    UNTIE this

A class implementing a scalar should have the following methods:

    TIESCALAR classname, LIST
    FETCH this,
    STORE this, value
    DESTROY this
    UNTIE this

Not all methods indicated above need be implemented.  See L<perltie>,
L<Tie::Hash>, L<Tie::Array>, L<Tie::Scalar>, and L<Tie::Handle>.

Unlike C<dbmopen>, the C<tie> function will not use or require a module
for you--you need to do that explicitly yourself.  See L<DB_File>
or the F<Config> module for interesting C<tie> implementations.

For further details see L<perltie>, L<"tied VARIABLE">.

=item tied VARIABLE

Returns a reference to the object underlying VARIABLE (the same value
that was originally returned by the C<tie> call that bound the variable
to a package.)  Returns the undefined value if VARIABLE isn't tied to a
package.

=item time

Returns the number of non-leap seconds since whatever time the system
considers to be the epoch, suitable for feeding to C<gmtime> and
C<localtime>. On most systems the epoch is 00:00:00 UTC, January 1, 1970;
a prominent exception being Mac OS Classic which uses 00:00:00, January 1,
1904 in the current local time zone for its epoch.

For measuring time in better granularity than one second,
you may use either the Time::HiRes module (from CPAN, and starting from
Perl 5.8 part of the standard distribution), or if you have
gettimeofday(2), you may be able to use the C<syscall> interface of Perl.
See L<perlfaq8> for details.

=item times

Returns a four-element list giving the user and system times, in
seconds, for this process and the children of this process.

    ($user,$system,$cuser,$csystem) = times;

In scalar context, C<times> returns C<$user>.

=item tr///

The transliteration operator.  Same as C<y///>.  See L<perlop>.

=item truncate FILEHANDLE,LENGTH

=item truncate EXPR,LENGTH

Truncates the file opened on FILEHANDLE, or named by EXPR, to the
specified length.  Produces a fatal error if truncate isn't implemented
on your system.  Returns true if successful, the undefined value
otherwise.

The behavior is undefined if LENGTH is greater than the length of the
file.

=item uc EXPR

=item uc

Returns an uppercased version of EXPR.  This is the internal function
implementing the C<\U> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
It does not attempt to do titlecase mapping on initial letters.  See
C<ucfirst> for that.

If EXPR is omitted, uses C<$_>.

=item ucfirst EXPR

=item ucfirst

Returns the value of EXPR with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the C<\u> escape in double-quoted strings.  Respects current LC_CTYPE
locale if C<use locale> in force.  See L<perllocale> and L<perlunicode>
for more details about locale and Unicode support.

If EXPR is omitted, uses C<$_>.

=item umask EXPR

=item umask

Sets the umask for the process to EXPR and returns the previous value.
If EXPR is omitted, merely returns the current umask.

The Unix permission C<rwxr-x---> is represented as three sets of three
bits, or three octal digits: C<0750> (the leading 0 indicates octal
and isn't one of the digits).  The C<umask> value is such a number
representing disabled permissions bits.  The permission (or "mode")
values you pass C<mkdir> or C<sysopen> are modified by your umask, so
even if you tell C<sysopen> to create a file with permissions C<0777>,
if your umask is C<0022> then the file will actually be created with
permissions C<0755>.  If your C<umask> were C<0027> (group can't
write; others can't read, write, or execute), then passing
C<sysopen> C<0666> would create a file with mode C<0640> (C<0666 &~
027> is C<0640>).

Here's some advice: supply a creation mode of C<0666> for regular
files (in C<sysopen>) and one of C<0777> for directories (in
C<mkdir>) and executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of C<022>, C<027>, or even the particularly antisocial mask of C<077>.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, I<.rhosts> files, and
so on.

If umask(2) is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., (EXPR & 0700) > 0), produces a
fatal error at run time.  If umask(2) is not implemented and you are
not trying to restrict access for yourself, returns C<undef>.

Remember that a umask is a number, usually given in octal; it is I<not> a
string of octal digits.  See also L</oct>, if all you have is a string.

=item undef EXPR

=item undef

Undefines the value of EXPR, which must be an lvalue.  Use only on a
scalar value, an array (using C<@>), a hash (using C<%>), a subroutine
(using C<&>), or a typeglob (using C<*>).  (Saying C<undef $hash{$key}>
will probably not do what you expect on most predefined variables or
DBM list values, so don't do that; see L<delete>.)  Always returns the
undefined value.  You can omit the EXPR, in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable or pass as a
parameter.  Examples:

    undef $foo;
    undef $bar{'blurfl'};      # Compare to: delete $bar{'blurfl'};
    undef @ary;
    undef %hash;
    undef &mysub;
    undef *xyz;       # destroys $xyz, @xyz, %xyz, &xyz, etc.
    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
    select undef, undef, undef, 0.25;
    ($a, $b, undef, $c) = &foo;       # Ignore third value returned

Note that this is a unary operator, not a list operator.

=item unlink LIST

=item unlink

Deletes a list of files.  Returns the number of files successfully
deleted.

    $cnt = unlink 'a', 'b', 'c';
    unlink @goners;
    unlink <*.bak>;

Note: C<unlink> will not delete directories unless you are superuser and
the B<-U> flag is supplied to Perl.  Even if these conditions are
met, be warned that unlinking a directory can inflict damage on your
filesystem.  Use C<rmdir> instead.

If LIST is omitted, uses C<$_>.

=item unpack TEMPLATE,EXPR

C<unpack> does the reverse of C<pack>: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)

The string is broken into chunks described by the TEMPLATE.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of C<pack>, or the bytes of the string represent a C structure of some
kind.

The TEMPLATE has the same format as in the C<pack> function.
Here's a subroutine that does substring:

    sub substr {
         my($what,$where,$howmuch) = @_;
         unpack("x$where a$howmuch", $what);
    }

and then there's

    sub ordinal { unpack("c",$_[0]); } # same as ord()

In addition to fields allowed in pack(), you may prefix a field with
a %<number> to indicate that
you want a <number>-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  Checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
C<ord($char)> is taken, for bit fields the sum of zeroes and ones).

For example, the following
computes the same number as the System V sum program:

    $checksum = do {
         local $/;  # slurp!
         unpack("%32C*",<>) % 65535;
    };

The following efficiently counts the number of set bits in a bit vector:

    $setbits = unpack("%32b*", $selectmask);

The C<p> and C<P> formats should be used with care.  Since Perl
has no way of checking whether the value passed to C<unpack()>
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.

If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: in some cases, the repeat count is decreased, or
C<unpack()> will produce null strings or zeroes, or terminate with an
error. If the input string is longer than one described by the TEMPLATE,
the rest is ignored.

See L</pack> for more examples and notes.

=item untie VARIABLE

Breaks the binding between a variable and a package.  (See C<tie>.)
Has no effect if the variable is not tied.

=item unshift ARRAY,LIST

Does the opposite of a C<shift>.  Or the opposite of a C<push>,
depending on how you look at it.  Prepends list to the front of the
array, and returns the new number of elements in the array.

    unshift(@ARGV, '-e') unless $ARGV[0] =~ /^-/;

Note the LIST is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use C<reverse> to do the
reverse.

=item use Module VERSION LIST

=item use Module VERSION

=item use Module LIST

=item use Module

=item use VERSION

Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package.  It is exactly equivalent to

    BEGIN { require Module; import Module LIST; }

except that Module I<must> be a bareword.

VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION.  A fatal error is produced if VERSION is
greater than the version of the current Perl interpreter; Perl will not
attempt to parse the rest of the file.  Compare with L</require>, which can
do a similar check at run time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl which do not support this syntax.  The equivalent numeric
version should be used instead.

    use v5.6.1;                  # compile time version check
    use 5.6.1;                  # ditto
    use 5.006_001;         # ditto; preferred for backwards compatibility

This is often useful if you need to check the current Perl version before
C<use>ing library modules that have changed in incompatible ways from
older versions of Perl.  (We try not to do this more than we have to.)

The C<BEGIN> forces the C<require> and C<import> to happen at compile time.  The
C<require> makes sure the module is loaded into memory if it hasn't been
yet.  The C<import> is not a builtin--it's just an ordinary static method
call into the C<Module> package to tell the module to import the list of
features back into the current package.  The module can implement its
C<import> method any way it likes, though most modules just choose to
derive their C<import> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import>
method can be found then the call is skipped.

If you do not want to call the package's C<import> method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:

    use Module ();

That is exactly equivalent to

    BEGIN { require Module }

If the VERSION argument is present between Module and LIST, then the
C<use> will call the VERSION method in class Module with the given
version as an argument.  The default VERSION method, inherited from
the UNIVERSAL class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>.

Again, there is a distinction between omitting LIST (C<import> called
with no arguments) and an explicit empty LIST C<()> (C<import> not
called).  Note that there is no comma after VERSION!

Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Currently implemented pragmas are:

    use constant;
    use diagnostics;
    use integer;
    use sigtrap  qw(SEGV BUS);
    use strict   qw(subs vars refs);
    use subs     qw(afunc blurfl);
    use warnings qw(all);
    use sort     qw(stable _quicksort _mergesort);

Some of these pseudo-modules import semantics into the current
block scope (like C<strict> or C<integer>, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).

There's a corresponding C<no> command that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import>.

    no integer;
    no strict 'refs';
    no warnings;

See L<perlmodlib> for a list of standard modules and pragmas.  See L<perlrun>
for the C<-M> and C<-m> command-line options to perl that give C<use>
functionality from the command-line.

=item utime LIST

Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the NUMERICAL access
and modification times, in that order.  Returns the number of files
successfully changed.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix touch(1) command when the files I<already exist> and belong to
the user running the program:

    #!/usr/bin/perl
    $atime = $mtime = time;
    utime $atime, $mtime, @ARGV;

Since perl 5.7.2, if the first two elements of the list are C<undef>, then
the utime(2) function in the C library will be called with a null second
argument. On most systems, this will set the file's access and
modification times to the current time (i.e. equivalent to the example
above) and will even work on other users' files where you have write
permission:

    utime undef, undef, @ARGV;

Under NFS this will use the time of the NFS server, not the time of
the local machine.  If there is a time synchronization problem, the
NFS server and local machine will have different times.  The Unix
touch(1) command will in fact normally use this form instead of the
one shown in the first example.

Note that only passing one of the first two elements as C<undef> will
be equivalent of passing it as 0 and will not have the same effect as
described when they are both C<undef>.  This case will also trigger an
uninitialized warning.

=item values HASH

Returns a list consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)

The values are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the C<keys> or C<each>
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see L<perlsec/"Algorithmic Complexity Attacks">).

As a side effect, calling values() resets the HASH's internal iterator,
see L</each>. (In particular, calling values() in void context resets
the iterator with no other overhead.)

Note that the values are not copied, which means modifying them will
modify the contents of the hash:

    for (values %hash)              { s/foo/bar/g }   # modifies %hash values
    for (@hash{keys %hash}) { s/foo/bar/g }   # same

See also C<keys>, C<each>, and C<sort>.

=item vec EXPR,OFFSET,BITS

Treats the string in EXPR as a bit vector made up of elements of
width BITS, and returns the value of the element specified by OFFSET
as an unsigned integer.  BITS therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).

If BITS is 8, "elements" coincide with bytes of the input string.

If BITS is 16 or more, bytes of the input string are grouped into chunks
of size BITS/8, and each group is converted to a number as with
pack()/unpack() with big-endian formats C<n>/C<N> (and analogously
for BITS==64).  See L<"pack"> for details.

If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in C<0x01>, C<0x02>,
C<0x04>, C<0x08>, C<0x10>, C<0x20>, C<0x40>, C<0x80>.  For example,
breaking the single input byte C<chr(0x36)> into two groups gives a list
C<(0x6, 0x3)>; breaking it into 4 groups gives C<(0x2, 0x1, 0x3, 0x0)>.

C<vec> may also be assigned to, in which case parentheses are needed
to give the expression the correct precedence as in

    vec($image, $max_x * $x + $y, 8) = 3;

If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e. negative OFFSET).

The string should not contain any character with the value > 255 (which
can only happen if you're using UTF-8 encoding).  If it does, it will be
treated as something which is not UTF-8 encoded.  When the C<vec> was
assigned to, other parts of your program will also no longer consider the
string to be UTF-8 encoded.  In other words, if you do have such characters
in your string, vec() will operate on the actual byte string, and not the
conceptual character string.

Strings created with C<vec> can also be manipulated with the logical
operators C<|>, C<&>, C<^>, and C<~>.  These operators will assume a bit
vector operation is desired when both operands are strings.
See L<perlop/"Bitwise String Operators">.

The following code will build up an ASCII string saying C<'PerlPerlPerl'>.
The comments show the string after each step.  Note that this code works
in the same way on big-endian or little-endian machines.

    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C;         # 'Perl'

    # $foo eq "Perl" eq "\x50\x65\x72\x6C", 32 bits
    print vec($foo, 0, 8);                  # prints 80 == 0x50 == ord('P')

    vec($foo,  2, 16) = 0x5065;                  # 'PerlPe'
    vec($foo,  3, 16) = 0x726C;                  # 'PerlPerl'
    vec($foo,  8,  8) = 0x50;                  # 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;                  # 'PerlPerlPe'
    vec($foo, 20,  4) = 2;                  # 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;                  # 'PerlPerlPer'
                                        # 'r' is "\x72"
    vec($foo, 45,  2) = 3;                  # 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;                  # 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;                  # 'PerlPerlPerl'
                                        # 'l' is "\x6c"

To transform a bit vector into a string or list of 0's and 1's, use these:

    $bits = unpack("b*", $vector);
    @bits = split(//, unpack("b*", $vector));

If you know the exact length in bits, it can be used in place of the C<*>.

Here is an example to illustrate how the bits actually fall in place:

    #!/usr/bin/perl -wl

    print <<'EOT';
                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    EOT

    for $w (0..3) {
        $width = 2**$w;
        for ($shift=0; $shift < $width; ++$shift) {
            for ($off=0; $off < 32/$width; ++$off) {
                $str = pack("B*", "0"x32);
                $bits = (1<<$shift);
                vec($str, $off, $width) = $bits;
                $res = unpack("b*",$str);
                $val = unpack("V", $str);
                write;
            }
        }
    }

    format STDOUT =
    vec($_,@#,@#) = @<< == @######### @>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    $off, $width, $bits, $val, $res
    .
    __END__

Regardless of the machine architecture on which it is run, the above
example should print the following table:

                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
    vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
    vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
    vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
    vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
    vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
    vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
    vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
    vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
    vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
    vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
    vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
    vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
    vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
    vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
    vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
    vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
    vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
    vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
    vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
    vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
    vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
    vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
    vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
    vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
    vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
    vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
    vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
    vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
    vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
    vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
    vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
    vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
    vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
    vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
    vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
    vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
    vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
    vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
    vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
    vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
    vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
    vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
    vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
    vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
    vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
    vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
    vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
    vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
    vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
    vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
    vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
    vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
    vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
    vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
    vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
    vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
    vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
    vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
    vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
    vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
    vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
    vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
    vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
    vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
    vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
    vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
    vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
    vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
    vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
    vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
    vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
    vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
    vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
    vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
    vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001

=item wait

Behaves like the wait(2) system call on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
C<-1> if there are no child processes.  The status is returned in C<$?>.
Note that a return value of C<-1> could mean that child processes are
being automatically reaped, as described in L<perlipc>.

=item waitpid PID,FLAGS

Waits for a particular child process to terminate and returns the pid of
the deceased process, or C<-1> if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in C<$?>.  If you say

    use POSIX ":sys_wait_h";
    #...
    do {
         $kid = waitpid(-1, WNOHANG);
    } until $kid > 0;

then you can do a non-blocking wait for all pending zombie processes.
Non-blocking wait is available on machines supporting either the
waitpid(2) or wait4(2) system calls.  However, waiting for a particular
pid with FLAGS of C<0> is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)

Note that on some systems, a return value of C<-1> could mean that child
processes are being automatically reaped.  See L<perlipc> for details,
and for other examples.

=item wantarray

Returns true if the context of the currently executing subroutine or
C<eval> is looking for a list value.  Returns false if the context is
looking for a scalar.  Returns the undefined value if the context is
looking for no value (void context).

    return unless defined wantarray;         # don't bother doing more
    my @a = complex_calculation();
    return wantarray ? @a : "@a";

C<wantarray()>'s result is unspecified in the top level of a file,
in a C<BEGIN>, C<CHECK>, C<INIT> or C<END> block, or in a C<DESTROY>
method.

This function should have been named wantlist() instead.

=item warn LISTA

Produz uma mensagem na STDER exatamente como C<die>, mas não aborta ou lança um
exceção.

Se LISTA é nula e C<$@> já contém um valor (tipicamente de um prévio eval) este
valor é usado depois apensando C<"\t...caught"> à C<$@>. Isto é útil para ficar
quase, mas não completamente similar ao C<die>.

Se C<$@> é nulo então a strign C<"Warning: Something's wrong"> é usada.

No message is printed if there is a C<$SIG{__WARN__}> handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a C<die>).  Most
handlers must therefore make arrangements to actually display the
warnings that they are not prepared to deal with, by calling C<warn>
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since C<__WARN__> hooks are not called from
inside one.

You will find this behavior is slightly different from that of
C<$SIG{__DIE__}> handlers (which don't suppress the error text, but can
instead call C<die> again to change it).

Using a C<__WARN__> handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:

    # wipe out *all* compile-time warnings
    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
    my $foo = 10;
    my $foo = 20;          # no warning about duplicate my $foo,
                           # but hey, you asked for it!
    # no compile-time or run-time warnings before here
    $DOWARN = 1;

    # run-time warnings enabled after here
    warn "\$foo is alive and $foo!";     # does show up

See L<perlvar> for details on setting C<%SIG> entries, and for more
examples.  See the Carp module for other kinds of warnings using its
carp() and cluck() functions.

=item write FILEHANDLE

=item write EXPR

=item write

Writes a formatted record (possibly multi-line) to the specified FILEHANDLE,
using the format associated with that file.  By default the format for
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the C<select> function) may be set
explicitly by assigning the name of the format to the C<$~> variable.

Top of form processing is handled automatically:  if there is
insufficient room on the current page for the formatted record, the
page is advanced by writing a form feed, a special top-of-page format
is used to format the new page header, and then the record is written.
By default the top-of-page format is the name of the filehandle with
"_TOP" appended, but it may be dynamically set to the format of your
choice by assigning the name to the C<$^> variable while the filehandle is
selected.  The number of lines remaining on the current page is in
variable C<$->, which can be set to C<0> to force a new page.

If FILEHANDLE is unspecified, output goes to the current default output
channel, which starts out as STDOUT but may be changed by the
C<select> operator.  If the FILEHANDLE is an EXPR, then the expression
is evaluated and the resulting string is used to look up the name of
the FILEHANDLE at run time.  For more on formats, see L<perlform>.

Note that write is I<not> the opposite of C<read>.  Unfortunately.

=item y///

O operado de transliteração. O mesmo que C<tr///>. Veja L<perlop>.

=back


=head1 TRADUZINDO

Main.RonaldoLima
Main.DanielVinciguerra


